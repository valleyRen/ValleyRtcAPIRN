
import { NativeModules } from 'react-native';

const { RNValleyRtcApi } = NativeModules;

//export default RNValleyRtcApi;


// typedef void (^RCTResponseSenderBlock)(NSArray *response);
// typedef void (^RCTPromiseResolveBlock)(id result);
// typedef void (^RCTPromiseRejectBlock)(NSString *code, NSString *message, NSError *error);

export default {
    initSDK: function(workfolder, localconfig) {
        return RNValleyRtcApi.InitSDK(workfolder, localconfig);
    },
    setAuthoKey: function(authokey) {
        return RNValleyRtcApi.SetAuthoKey(authokey);
    },
    cleanSDK: function() {
        return RNValleyRtcApi.cleanSDK();
    },
    getErrDesc: function(ec, cb) {
        return RNValleyRtcApi.getErrDesc(ec, cb);
    },
    getSDKVersion: function(cb) {
        return RNValleyRtcApi.getSDKVersion(cb);
    },
    createChannel: function(withVideo) {
        return RNValleyRtcApi.createChannel(withVideo);
    },
    channleRelease: function() {
        return RNValleyRtcApi.ChannelRelease();
    },
    channelLogout: function() {
        return RNValleyRtcApi.ChannelLogout();
    },
    channelGetLoginStatus: function(cb) {
        return RNValleyRtcApi.ChannelGetLoginStatus(cb);
    },
    channelEnableInterface: function(iids, cb) {
        return RNValleyRtcApi.ChannelEnableInterface(iids, cb);
    },
    channelLogin: function(channelid, userid, cb) {
        return RNValleyRtcApi.ChannelLogin(channelid, userid, cb);
    },
    channelSendMsgr: function(msgtype, msg, token, toUID, cb) {
        return RNValleyRtcApi.ChannelLogin(msgtype, msg, token, toUID, cb);
    },
    channelSetVideoProfileint: function(profile, cb) {
        return RNValleyRtcApi.ChannelSetVideoProfileint(profile, cb);
    },
    channelSetLocalVideo: function(hVideo, cb) {
        return RNValleyRtcApi.ChannelSetLocalVideo(hVideo, cb);
    },
    channelRemoveLocalVideo: function(cb) {
        return RNValleyRtcApi.ChannelRemoveLocalVideo(cb);
    },
    channelSetUserVideo: function(userid, hVideo, cb) {
        return RNValleyRtcApi.ChannelSetUserVideo(userid, hVideo, cb);
    },
    channelRemoveUserVideo: function(userid, cb) {
        return RNValleyRtcApi.ChannelSetUserVideo(userid, cb);
    },
    channelEnableLocalAudio: function(bEnable, cb) {
        return RNValleyRtcApi.ChannelEnableLocalAudio(bEnable, cb);
    },
    channelEnableLocalVideo: function(bEnable, cb) {
        return RNValleyRtcApi.ChannelEnableLocalVideo(bEnable, cb);
    },
    channelEnableRemoteAudio: function(userid, bEnable, cb) {
        return RNValleyRtcApi.ChannelEnableRemoteAudio(userid, bEnable, cb);
    },
    channelEnableRemoteVideo: function(userid, bEnable, cb) {
        return RNValleyRtcApi.ChannelEnableRemoteVideo(userid, bEnable, cb);
    },
    channelDisableAudio: function(cb) {
        return RNValleyRtcApi.ChannelDisableAudio(cb);
    },
    channelDisableVideo: function(cb) {
        return RNValleyRtcApi.ChannelDisableVideo(cb);
    },
    channelSwitchCamera: function(cb) {
        return RNValleyRtcApi.ChannelSwitchCamera(cb);
    },
    channelSetChannelAttr: function(name, value, cb) {
        return RNValleyRtcApi.ChannelSetChannelAttr(name, value, cb);
    },
    channelSetUserAttr: function(uid, name, value, cb) {
        return RNValleyRtcApi.ChannelSetUserAttr(uid, name, value, cb);
    },
    channelGetChannelAttr: function(name, cb) {
        return RNValleyRtcApi.ChannelGetChannelAttr(name, cb);
    },
    channelGetUserAttr: function(uid, name, cb) {
        return RNValleyRtcApi.ChannelGetUserAttr(uid, name, cb);
    },
    channelGetUser: function(uid) {
        return RNValleyRtcApi.ChannelGetUser(uid);
    },
    channelGetUserList: function() {
        return RNValleyRtcApi.ChannelGetUserList();
    }
};

// const
// use as RNValleyRtcApi.ERR_SUCCEED
// ================   return result
// ERR_SUCCEED
// ERR_NOT_LOGINED
// ERR_ALREADY_RUN
// ERR_USER_NOTFOUND
// ERR_EXCUTING
// ERR_NOT_INITIALIZE
// ERR_UNSUPPORT
// ERR_ARGUMENT
// ERR_CHANNEL_EXPIRED
// ERR_CONNECT_SERVER_FAILED
// ERR_REQUEST_TIMEOUT
// ERR_CONFIG
// ERR_NET_POOL
// ERR_VERSION_UNSUPPORTED
// ERR_AUTHO_FAILED
// ERR_NOT_ENOUGH_CHANNEL
// ERR_SERVER_ERROR
// ERR_OPEN_RECORD
// ERR_OPEN_PLAYOUT
// ERR_RECORD_PERMISSION
// ================   return result

// IID_USERS
// IID_AUDIO
// IID_RTCMSGR

// STATUS_NONE
// STATUS_LOGINED
// STATUS_LOGINING

// TYPE_TEXT
// TYPE_AUDIO
// TYPE_BINARY
// TYPE_CMD

// VIDEO_CAPTURE_TYPE_16X9_160
// VIDEO_CAPTURE_TYPE_16X9_320
// VIDEO_CAPTURE_TYPE_16X9_480
// VIDEO_CAPTURE_TYPE_16X9_640
// VIDEO_CAPTURE_TYPE_16X9_800
// VIDEO_CAPTURE_TYPE_16X9_960
// VIDEO_CAPTURE_TYPE_16X9_1280
// VIDEO_CAPTURE_TYPE_16X9_1920
// VIDEO_CAPTURE_TYPE_4X3_160
// VIDEO_CAPTURE_TYPE_4X3_320
// VIDEO_CAPTURE_TYPE_4X3_480
// VIDEO_CAPTURE_TYPE_4X3_640
// VIDEO_CAPTURE_TYPE_4X3_800
// VIDEO_CAPTURE_TYPE_4X3_960
// VIDEO_CAPTURE_TYPE_4X3_1280
// VIDEO_CAPTURE_TYPE_4X3_1920
// VIDEO_CAPTURE_TYPE_16X16
// NO_ROTATE_TYPE_90

// XRTC_CHANNELPROFILE_COMMUNICATION
// XRTC_CHANNELPROFILE_LIVEbROADCASTING

// RENDER_TYPE_FULL
// RENDER_TYPE_ADAPTIVE
// RENDER_TYPE_CROP
// RENDER_TYPE_AUTO

// RTC_EVTID_RESP_LOGINED
// RTC_EVTID_RESP_SET_CHANNEL_ATTR
// RTC_EVTID_RESP_SET_USER_ATTR
// RTC_EVTID_RESP_SEND_MSG

// RTC_EVTID_NTF_USER_ENTER
// RTC_EVTID_NTF_USER_LEAVE
// RTC_EVTID_NTF_SET_CHANNEL_ATTR
// RTC_EVTID_NTF_SET_USER_ATTR
// RTC_EVTID_NTF_RECV_MSG
// RTC_EVTID_NTF_CONNECT_LOST
// RTC_EVTID_NTF_CONNECT_RESUME
// RTC_EVTID_NTF_DUP_LOGINED

// notify :  ValleyCallback



- (NSDictionary*)fromObjRespLogin:(objRespLogin*)in {
    return @{
	@"code":@([in getErrorCode]),
	@"userid":[in getUserID],
    };
}

- (NSDictionary*)fromObjNtfUserEnter:(objNtfUserEnter*)in {
    return @{
	@"code":@([in getEventID]),
	@"userid":[in getUserID],
    };
}

- (NSDictionary*)fromObjNtfUserLeave:(objNtfUserLeave*)in {
    return @{
	@"code":@([in getEventID]),
	@"userid":[in getUserID],
    };
}

- (NSDictionary*)fromObjRespMsg:(objRespMsg*)in {
    return @{
	@"code":@([in getErrorCode]),
	@"from_userid":[in getFromUserID],
	@"to_userid":[in getToUserID],
	@"msg":[in getMessage],
	@"token":[in getToken],
	@"msg_type":@([in getMsgType]),
	@"msg_time":@([in getMsgTime]),
    };
}

- (NSDictionary*)fromObjNtfMsg:(objNtfMsg*)in {
    return @{
	@"code":@([in getEventID]),
	@"from_userid":[in getFromUserID],
	@"to_userid":[in getToUserID],
	@"msg":[in getMessage],
	@"token":[in getToken],
	@"msg_type":@([in getMsgType]),
	@"msg_time":@([in getMsgTime]),
    };
}

- (NSDictionary*)fromObjNtfNetLost:(objNtfNetLost*)in {
    return @{
	@"code":@([in getEventID]),
    };
}

- (NSDictionary*)fromObjNtfNetResume:(objNtfNetResume*)in {
    return @{
	@"code":@([in getEventID]),
    };
}

- (NSDictionary*)fromObjNtfDupLogined:(objNtfDupLogined*)in {
    return @{
	@"code":@([in getEventID]),
    };
}

- (NSDictionary*)fromObjRespSetChannelAttr:(objRespSetChannelAttr*)in {
    return @{
	@"code":@([in getErrorCode]),
	@"attr_name":[in attrname],
	@"attr_value":[in attrvalue],
    };
}

- (NSDictionary*)fromObjNtfSetChannelAttr:(objNtfSetChannelAttr*)in {
    return @{
	@"code":@([in getEventID]),
	@"attr_name":[in attrname],
	@"attr_value":[in attrvalue],
    };
}

- (NSDictionary*)fromObjRespSetUserAttr:(objRespSetUserAttr*)in {
    return @{
	@"code":@([in getErrorCode]),
	@"userid":[in userid],
	@"attr_name":[in attrname],
	@"attr_value":[in attrvalue],
    };
}

- (NSDictionary*)fromObjNtfSetUserAttr:(objNtfSetUserAttr*)in {
    return @{
	@"code":@([in getEventID]),
	@"userid":[in userid],
	@"attr_name":[in attrname],
	@"attr_value":[in attrvalue],
    };
}

- (NSDictionary*)fromObjUser:(objUser*)in {
    // TODO: only return user id, attr will use function to get
    return @{
	@"userid":[in userid],
    };
}

- (NSDictionary*)fromObjUserList:(objUserList*)in {
    NSDictionary *out;
    // add @[in count] to NSDictionary;
    while ([in next]) {
	NSString* userid = [in userid];
	// add to NSDictionary
    }
    return out;
}
