
import { NativeModules } from 'react-native';

const { RNValleyRtcAPI } = NativeModules;

export default RNValleyRtcAPI;


//export default {
//    initSDK: function(workfolder, localconfig) {
//        return RNValleyRtcApi.InitSDK(workfolder, localconfig);
//    },
//    setAuthoKey: function(authokey) {
//        return RNValleyRtcApi.SetAuthoKey(authokey);
//    },
//    cleanSDK: function() {
//        return RNValleyRtcApi.cleanSDK();
//    },
//    getErrDesc: function(ec, cb) {
//        return RNValleyRtcApi.getErrDesc(ec, cb);  cb(string)
//    },
//    getSDKVersion: function(cb) {
//        return RNValleyRtcApi.getSDKVersion(cb);  cb(string)
//    },
//    createChannel: function(withVideo) {
//        return RNValleyRtcApi.createChannel(withVideo);
//    },
//    channleRelease: function() {
//        return RNValleyRtcApi.ChannelRelease();
//    },
//    channelLogout: function() {
//        return RNValleyRtcApi.ChannelLogout();
//    },
//    channelGetLoginStatus: function(cb) {
//        return RNValleyRtcApi.ChannelGetLoginStatus(cb);  cb(int)
//    },
//    channelEnableInterface: function(iids, cb) {
//        return RNValleyRtcApi.ChannelEnableInterface(iids, cb);  cb(int)
//    },
//    channelLogin: function(channelid, userid, cb) {
//        return RNValleyRtcApi.ChannelLogin(channelid, userid, cb);  cb(int)
//    },
//    channelSendMsgr: function(msgtype, msg, token, toUID, cb) {
//        return RNValleyRtcApi.ChannelLogin(msgtype, msg, token, toUID, cb);  cb(int)
//    },
//    channelSetVideoProfileint: function(profile, cb) {
//        return RNValleyRtcApi.ChannelSetVideoProfileint(profile, cb);  cb(int)
//    },
//    channelSetLocalVideo: function(hVideo, cb) {
//        return RNValleyRtcApi.ChannelSetLocalVideo(hVideo, cb);  cb(int)
//    },
//    channelRemoveLocalVideo: function(cb) {
//        return RNValleyRtcApi.ChannelRemoveLocalVideo(cb);  cb(int)
//    },
//    channelSetUserVideo: function(userid, hVideo, cb) {
//        return RNValleyRtcApi.ChannelSetUserVideo(userid, hVideo, cb);  cb(int)
//    },
//    channelRemoveUserVideo: function(userid, cb) {
//        return RNValleyRtcApi.ChannelSetUserVideo(userid, cb);  cb(int)
//    },
//    channelEnableLocalAudio: function(bEnable, cb) {
//        return RNValleyRtcApi.ChannelEnableLocalAudio(bEnable, cb);  cb(int)
//    },
//    channelEnableLocalVideo: function(bEnable, cb) {
//        return RNValleyRtcApi.ChannelEnableLocalVideo(bEnable, cb);  cb(int)
//    },
//    channelEnableRemoteAudio: function(userid, bEnable, cb) {
//        return RNValleyRtcApi.ChannelEnableRemoteAudio(userid, bEnable, cb);  cb(int)
//    },
//    channelEnableRemoteVideo: function(userid, bEnable, cb) {
//        return RNValleyRtcApi.ChannelEnableRemoteVideo(userid, bEnable, cb);  cb(int)
//    },
//    channelDisableAudio: function(cb) {
//        return RNValleyRtcApi.ChannelDisableAudio(cb);  cb(int)
//    },
//    channelDisableVideo: function(cb) {
//        return RNValleyRtcApi.ChannelDisableVideo(cb);  cb(int)
//    },
//    channelSwitchCamera: function(cb) {
//        return RNValleyRtcApi.ChannelSwitchCamera(cb);  cb(int)
//    },
//    channelSetChannelAttr: function(name, value, cb) {
//        return RNValleyRtcApi.ChannelSetChannelAttr(name, value, cb);  cb(int)
//    },
//    channelSetUserAttr: function(uid, name, value, cb) {
//        return RNValleyRtcApi.ChannelSetUserAttr(uid, name, value, cb);  cb(int)
//    },
//    channelGetChannelAttr: function(name, cb) {
//        return RNValleyRtcApi.ChannelGetChannelAttr(name, cb);  cb(string)
//    },
//    channelGetUserAttr: function(uid, name, cb) {
//        return RNValleyRtcApi.ChannelGetUserAttr(uid, name, cb);  cb(string)
//    },
//    channelGetUser: function(uid) {
//        return RNValleyRtcApi.ChannelGetUser(uid);  Promise=> channelGetUser, return dic: userid
//    },
//    channelGetUserList: function() {
//        return RNValleyRtcApi.ChannelGetUserList();  Promise=> channelGetUserList, return dic: count, user_id_list = []
//    }
//    if u want to get user attr, please use channelGetUserAttr
//};

// const
// use as RNValleyRtcApi.ERR_SUCCEED
// ================   return result
// ERR_SUCCEED
// ERR_NOT_LOGINED
// ERR_ALREADY_RUN
// ERR_USER_NOTFOUND
// ERR_EXCUTING
// ERR_NOT_INITIALIZE
// ERR_UNSUPPORT
// ERR_ARGUMENT
// ERR_CHANNEL_EXPIRED
// ERR_CONNECT_SERVER_FAILED
// ERR_REQUEST_TIMEOUT
// ERR_CONFIG
// ERR_NET_POOL
// ERR_VERSION_UNSUPPORTED
// ERR_AUTHO_FAILED
// ERR_NOT_ENOUGH_CHANNEL
// ERR_SERVER_ERROR
// ERR_OPEN_RECORD
// ERR_OPEN_PLAYOUT
// ERR_RECORD_PERMISSION
// ================   return result

// IID_USERS
// IID_AUDIO
// IID_RTCMSGR

// STATUS_NONE
// STATUS_LOGINED
// STATUS_LOGINING

// TYPE_TEXT
// TYPE_AUDIO
// TYPE_BINARY
// TYPE_CMD

// VIDEO_CAPTURE_TYPE_16X9_160
// VIDEO_CAPTURE_TYPE_16X9_320
// VIDEO_CAPTURE_TYPE_16X9_480
// VIDEO_CAPTURE_TYPE_16X9_640
// VIDEO_CAPTURE_TYPE_16X9_800
// VIDEO_CAPTURE_TYPE_16X9_960
// VIDEO_CAPTURE_TYPE_16X9_1280
// VIDEO_CAPTURE_TYPE_16X9_1920
// VIDEO_CAPTURE_TYPE_4X3_160
// VIDEO_CAPTURE_TYPE_4X3_320
// VIDEO_CAPTURE_TYPE_4X3_480
// VIDEO_CAPTURE_TYPE_4X3_640
// VIDEO_CAPTURE_TYPE_4X3_800
// VIDEO_CAPTURE_TYPE_4X3_960
// VIDEO_CAPTURE_TYPE_4X3_1280
// VIDEO_CAPTURE_TYPE_4X3_1920
// VIDEO_CAPTURE_TYPE_16X16
// NO_ROTATE_TYPE_90

// XRTC_CHANNELPROFILE_COMMUNICATION
// XRTC_CHANNELPROFILE_LIVEbROADCASTING

// RENDER_TYPE_FULL
// RENDER_TYPE_ADAPTIVE
// RENDER_TYPE_CROP
// RENDER_TYPE_AUTO

// RTC_EVTID_RESP_LOGINED
// RTC_EVTID_RESP_SET_CHANNEL_ATTR
// RTC_EVTID_RESP_SET_USER_ATTR
// RTC_EVTID_RESP_SEND_MSG

// RTC_EVTID_NTF_USER_ENTER
// RTC_EVTID_NTF_USER_LEAVE
// RTC_EVTID_NTF_SET_CHANNEL_ATTR
// RTC_EVTID_NTF_SET_USER_ATTR
// RTC_EVTID_NTF_RECV_MSG
// RTC_EVTID_NTF_CONNECT_LOST
// RTC_EVTID_NTF_CONNECT_RESUME
// RTC_EVTID_NTF_DUP_LOGINED
// end const

// notify :  ValleyCallback
// all notify return NSDictionary, have one code, we can use code == EVTID to get the params
// default is string, other is int or int64. all code type(int)

// RTC_EVTID_RESP_LOGINED, params: code, event, userid
// RTC_EVTID_RESP_SET_CHANNEL_ATTR, params: code, event, attr_name, attr_value
// RTC_EVTID_RESP_SET_USER_ATTR, params: code, event, userid, attr_name, attr_value
// RTC_EVTID_RESP_SEND_MSG, params: code, from_userid, event, to_userid, msg, token, msg_type(int), msg_time(int64)

// RTC_EVTID_NTF_USER_ENTER, params: code, event, userid
// RTC_EVTID_NTF_USER_LEAVE, params: code, event, userid
// RTC_EVTID_NTF_SET_CHANNEL_ATTR, params: code, event, attr_name, attr_value
// RTC_EVTID_NTF_SET_USER_ATTR, params: code, event, userid, attr_name, attr_value
// RTC_EVTID_NTF_RECV_MSG, params: code, from_userid, event, to_userid, msg, token, msg_type(int), msg_time(int64)
// RTC_EVTID_NTF_CONNECT_LOST, params: code, event,
// RTC_EVTID_NTF_CONNECT_RESUME, params: code, event,
// RTC_EVTID_NTF_DUP_LOGINED, params: code, event,
