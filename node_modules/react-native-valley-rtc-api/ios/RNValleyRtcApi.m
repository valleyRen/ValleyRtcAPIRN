
#import "RNValleyRtcApi.h"
#import "RNValleyRtcApiInternal.h"
#import <ValleyRtcAPI/ValleyRtcAPI_OC.h>

@implementation RNValleyRtcApi
{
    BOOL haveListener;
    NSTimer *timer;
    IRtcChannel *rtcChannel;
}

- (dispatch_queue_t)methodQueue
{
    return dispatch_get_main_queue();
}

+ (BOOL)requiresMainQueueSetup {
    return YES;
}

- (void)dealloc {
}

RCT_EXPORT_MODULE()

- (NSArray<NSString *> *)supportedEvents
{
    RCTLogInfo(@"=======  supportedEvents");
    return @[@"ValleyCallback"];
}

#pragma mark -- valley handle evnet 
- (NSDictionary*)handleRespLogined:(objBase*)obj {
    return @{};
}

- (NSDictionary*)handleRespSetChannelAttr:(objBase*)obj {
    return @{};
}

- (NSDictionary*)handleRespSetUserAttr:(objBase*)obj {
    return @{};
}

- (NSDictionary*)handleNtfUserEnter:(objBase*)obj {
    return @{};
}

- (NSDictionary*)handleNtfUserLeave:(objBase*)obj {
    return @{};
}

- (NSDictionary*)handleNtfSetChannelAttr:(objBase*)obj {
    return @{};
}

- (NSDictionary*)handleNtfSetUserAttr:(objBase*)obj {
    return @{};
}

- (NSDictionary*)handleNtfRecvMsg:(objBase*)obj {
    return @{};
}

- (NSDictionary*)handleNtfConnectLost:(objBase*)obj {
    return @{};
}

- (NSDictionary*)handleNtfConnectResume:(objBase*)obj {
    return @{};
}

- (NSDictionary*)handleNtfDupLogined:(objBase*)obj {
    return @{};
}

- (NSDictionary*)handleEvent:(objBaseEvent*)event {
    SEL method = nil;
    int code = [event getEventID];
    switch (code) {
	case RTC_EVTID_RESP_LOGINED:
	    method = @selector(handleRespLogined:objBase*);
	    break;
	case RTC_EVTID_RESP_SET_CHANNEL_ATTR:
	    method = @selector(handleRespSetChannelAttr:objBase*);
	    break;
	case RTC_EVTID_RESP_SET_USER_ATTR:
	    method = @selector(handleRespSetUserAttr:objBase*);
	    break;
	case RTC_EVTID_NTF_USER_ENTER:
	    method = @selector(handleNtfUserEnter:objBase*);
	    break;
	case RTC_EVTID_NTF_USER_LEAVE:
	    method = @selector(handleNtfUserLeave:objBase*);
	    break;
	case RTC_EVTID_NTF_SET_CHANNEL_ATTR:
	    method = @selector(handleNtfSetChannelAttr:objBase*);
	    break;
	case RTC_EVTID_NTF_SET_USER_ATTR:
	    method = @selector(handleNtfSetUserAttr:objBase*);
	    break;
	case RTC_EVTID_NTF_RECV_MSG:
	    method = @selector(handleNtfRecvMsg:objBase*);
	    break;
	case RTC_EVTID_NTF_CONNECT_LOST:
	    method = @selector(handleNtfConnectLost:objBase*);
	    break;
	case RTC_EVTID_NTF_CONNECT_RESUME:
	    method = @selector(handleNtfConnectResume:objBase*);
	    break;
	case RTC_EVTID_NTF_DUP_LOGINED:
	    method = @selector(handleNtfDupLogined:objBase*);
	    break;
    }

    if (method != nil) {
	return [self performSelector:method withObject:(objBase*)event];
    }
    RCTLogInfo(@"=======  handleEvent error!!!!!!!!!");
    return nil;
}

- (void)onTimer:(NSTimer*)sender {
    if (haveListener && rtcChannel) {
	objBaseEvent *event = [rtcChannel GetEvent];
	if (event) {
	    [self sendEventWithName:@"ValleyCallback" body:[self handleEvent:(objBase*)event]];
	    [rtcChannel ReleaseEvent:event];
	}
    }
}

- (void)startObserving {
    RCTLogInfo(@"=======  startObserving");
    haveListener = YES;
    if (!timer) {
        timer = [ NSTimer  scheduledTimerWithTimeInterval: 0.5
                                               target: self
                                               selector: @selector(onTimer:)
                                               userInfo:nil
                                               repeats: YES ];
    }
}

- (void)stopObserving {
    RCTLogInfo(@"=======  stopObserving");
    haveListener = NO;
    if (timer) {
        [timer invalidate];
        timer = nil;
    }
}

#pragma mark -- valley static api

RCT_EXPORT_METHOD(InitSDK:(nonnull NSString*)workfolder localconfig: (nullable NSString*)localconfig) {
    RCTLogInfo(@"=======  InitSDK, workfolder = %@, localconfig = %@", workfolder, localconfig);
    [[RNValleyRtcApiInternal GetInstance] InitSDK:workfolder localconfig:localconfig];
}

RCT_EXPORT_METHOD(SetAuthoKey:(nonnull NSString*)authokey) {
    RCTLogInfo(@"=======  SetAuthoKey, authokey = %@", authokey);
    [[RNValleyRtcApiInternal GetInstance] SetAuthoKey:authokey];
}

RCT_EXPORT_METHOD(CleanSDK) {
    RCTLogInfo(@"=======  CleanSDK");
    [[RNValleyRtcApiInternal GetInstance] CleanSDK];
}

RCT_EXPORT_METHOD(GetErrDesc:(int)ec callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  GetErrDesc, ec = %d", ec);
    callback(@[ [[RNValleyRtcApiInternal GetInstance] GetErrDesc:ec] ]);
}

RCT_EXPORT_METHOD(GetSDKVersion:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  GetSDKVersion");
    callback(@[ [[RNValleyRtcApiInternal GetInstance] GetSDKVersion] ]);
}

// typedef void (^RCTResponseSenderBlock)(NSArray *response);
// typedef void (^RCTPromiseResolveBlock)(id result);
// typedef void (^RCTPromiseRejectBlock)(NSString *code, NSString *message, NSError *error);
RCT_EXPORT_METHOD(CreateChannel:(bool)withVideo resolve:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTLogInfo(@"=======  CreateChannel, withVideo = %d", withVideo);
    if (rtcChannel != nil) {
	// TODO: how to do????? channel have > 1 instance
    }

    rtcChannel = [[RNValleyRtcApiInternal GetInstance] CreateChannel:withVideo]; 
    if (rtcChannel != nil) {
	resolve(@[ [NSNull null] ]);
    }
    else {
	// TODO: the callback need to return failed code, but is not defined!!!!!!
	reject(@"Create channel failed", nil, nil);
    }
}

#pragma mark -- valley channel api

RCT_EXPORT_METHOD(ChannleRelease) {
    RCTLogInfo(@"=======  ChannleRelease");
    if (rtcChannel) {
	[rtcChannel Release];

	// TODO:!!!!
	rtcChannel = nil;
    }
}

// TODO: if rtcChannel is nil, should to send error code as "the channel is nil"
RCT_EXPORT_METHOD(ChannleLogout) {
    RCTLogInfo(@"=======  ChannleLogout");
    if (rtcChannel) {
	[rtcChannel Logout];
    }
}

RCT_EXPORT_METHOD(ChannelGetLoginStatus:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelGetLoginStatus");
    if (rtcChannel) {
	callback(@[ @([rtcChannel GetLoginStatus]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelEnableInterface:(int)iids callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableInterface, iids = %d", iids);
    if (rtcChannel) {
	callback(@[ @([rtcChannel EnableInterface:iids]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelLogin:(nonnull NSString*)channelid userid:(nonnull NSString*)userid callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelLogin, channelid = %@, userid = %@", channelid, userid);
    if (rtcChannel) {
	callback(@[ @([rtcChannel Login:channelid userid:userid]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelSendMsgr:(int)msgtype msg:(nonnull NSString*)msg  token:(nullable NSString*)token toUID:(nullable NSString*)toUID callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSendMsgr, msgtype = %d, msg = %@, token = %@, toUID = %@", msgtype, msg, token, toUID);
    if (rtcChannel) {
	callback(@[ @([rtcChannel SendMsgr:msgtype msg:msg token:token toUID:toUID]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelSetVideoProfileint:(int)profile callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetVideoProfileint, profile = %d", profile);
    if (rtcChannel) {
	callback(@[ @([rtcChannel SetVideoProfileint:profile]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelSetLocalVideo:(nonnull xVideoCanvas*)hVideo callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetLocalVideo, hVideo = %p", hVideo);
    if (rtcChannel) {
	callback(@[ @([rtcChannel SetLocalVideo:hVideo]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelRemoveLocalVideo callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelRemoveLocalVideo");
    if (rtcChannel) {
	callback(@[ @([rtcChannel RemoveLocalVideo]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelSetUserVideo:(nonnull NSString*)userid hVideo:(nonnull xVideoCanvas*)hVideo callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetUserVideo, userid = %@, hVideo = %p", userid, hVideo);
    if (rtcChannel) {
	callback(@[ @([rtcChannel SetUserVideo:userid hVideo:hVideo]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelRemoveUserVideo:(nonnull NSString*)userid callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelRemoveUserVideo, userid = %@", userid);
    if (rtcChannel) {
	callback(@[ @([rtcChannel RemoveUserVideo:userid]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelEnableLocalAudio:(bool)bEnable callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableLocalAudio, bEnable = %d", bEnable);
    if (rtcChannel) {
	callback(@[ @([rtcChannel EnableLocalAudio:bEnable]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelEnableLocalVideo:(bool)bEnable callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableLocalVideo, bEnable = %d", bEnable);
    if (rtcChannel) {
	callback(@[ @([rtcChannel EnableLocalVideo:bEnable]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelEnableRemoteAudio:(nonnull NSString*)userid bEnable:(bool)b callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableRemoteAudio, userid = %@, bEnable = %d", userid, bEnable);
    if (rtcChannel) {
	callback(@[ @([rtcChannel EnableRemoteAudio:userid bEnable:b]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelEnableRemoteVideo:(nonnull NSString*)userid bEnable:(bool)b callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableRemoteVideo, userid = %@, bEnable = %d", userid, bEnable);
    if (rtcChannel) {
	callback(@[ @([rtcChannel EnableRemoteVideo:userid bEnable:b]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelDisableAudio callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelDisableAudio");
    if (rtcChannel) {
	callback(@[ @([rtcChannel DisableAudio]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelDisableVideo callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelDisableVideo");
    if (rtcChannel) {
	callback(@[ @([rtcChannel DisableVideo]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelSwitchCamera callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSwitchCamera");
    if (rtcChannel) {
	callback(@[ @([rtcChannel SwitchCamera]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelSetChannelAttr:(nonnull NSString*)name value:(nullable NSString*)value callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetChannelAttr, name = %@, value = %@", name, value);
    if (rtcChannel) {
	callback(@[ @([rtcChannel SetChannelAttr:name value:value]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelSetUserAttr:(nonnull NSString*)uid name:(nonnull NSString*)name value:(nullable NSString*)value callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetUserAttr, uid = %@, name = %@, value = %@", uid, name, value);
    if (rtcChannel) {
	callback(@[ @([rtcChannel SetUserAttr:uid name:name value:value]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelGetChannelAttr:(nonnull NSString*)name callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelGetChannelAttr, name = %@", name);
    if (rtcChannel) {
	callback(@[ [rtcChannel GetChannelAttr:name] ]);
    }
}

RCT_EXPORT_METHOD(ChannelGetUserAttr:(nonnull NSString*)uid name:(nonnull NSString*)name callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelGetUserAttr, uid = %@, name = %@", uid, name);
    if (rtcChannel) {
	callback(@[ [rtcChannel GetUserAttr:uid name:name] ]);
    }
}

RCT_EXPORT_METHOD(ChannelGetUser:(nonnull NSString*)uid resolve:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTLogInfo(@"=======  ChannelGetUser, uid = %@", uid);
    if (rtcChannel) {
	objUser *u = [rtcChannel GetUser:uid];
	if (u == nil ) {
	    // TODO: !!!!
	    reject(@"The user is nil", nil, nil);
	}
	else {
	    resolve([self fromObjUser:u]);
	}
    }
    else {
	// TODO: !!!!
	reject(@"The channel is nil", nil, nil);
    }
}

RCT_EXPORT_METHOD(ChannelGetUserList resolve:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTLogInfo(@"=======  ChannelGetUserList");
    if (rtcChannel) {
	objUserList *ul = [rtcChannel GetUserList];
	if (ul == nil ) {
	    // TODO: !!!!
	    reject(@"The user list is nil", nil, nil);
	}
	else {
	    resolve([self fromObjUserList:ul]);
	}
    }
    else {
	// TODO: !!!!
	reject(@"The channel is nil", nil, nil);
    }
}

@end

#pragma mark -- valley const 
- (NSDictionary*)constantsToExport {
    RCTLogInfo(@"=======  constantsToExport");
    return @{@"ERR_SUCCEED":@(ERR_SUCCEED),
             @"ERR_NOT_LOGINED":@(ERR_NOT_LOGINED),
             @"ERR_ALREADY_RUN":@(ERR_ALREADY_RUN),
             @"ERR_USER_NOTFOUND":@(ERR_USER_NOTFOUND),
             @"ERR_EXCUTING":@(ERR_EXCUTING),
             @"ERR_NOT_INITIALIZE":@(ERR_NOT_INITIALIZE),
             @"ERR_UNSUPPORT":@(ERR_UNSUPPORT),
             @"ERR_ARGUMENT":@(ERR_ARGUMENT),
             @"ERR_CHANNEL_EXPIRED":@(ERR_CHANNEL_EXPIRED),
             @"ERR_CONNECT_SERVER_FAILED":@(ERR_CONNECT_SERVER_FAILED),
             @"ERR_REQUEST_TIMEOUT":@(ERR_REQUEST_TIMEOUT),
             @"ERR_CONFIG":@(ERR_CONFIG),
             @"ERR_NET_POOL":@(ERR_NET_POOL),
             @"ERR_VERSION_UNSUPPORTED":@(ERR_VERSION_UNSUPPORTED),
             @"ERR_AUTHO_FAILED":@(ERR_AUTHO_FAILED),
             @"ERR_NOT_ENOUGH_CHANNEL":@(ERR_NOT_ENOUGH_CHANNEL),
             @"ERR_SERVER_ERROR":@(ERR_SERVER_ERROR),
             @"ERR_OPEN_RECORD":@(ERR_OPEN_RECORD),
             @"ERR_OPEN_PLAYOUT":@(ERR_OPEN_PLAYOUT),
             @"ERR_RECORD_PERMISSION":@(ERR_RECORD_PERMISSION),

             @"IID_USERS":@(IID_USERS),
             @"IID_AUDIO":@(IID_AUDIO),
             @"IID_RTCMSGR":@(IID_RTCMSGR),

             @"STATUS_NONE":@(STATUS_NONE),
             @"STATUS_LOGINED":@(STATUS_LOGINED),
             @"STATUS_LOGINING":@(STATUS_LOGINING),

             @"TYPE_TEXT":@(typeText),
             @"TYPE_AUDIO":@(typeAudio),
             @"TYPE_BINARY":@(typeBinary),
             @"TYPE_CMD":@(typeCmd),

             @"VIDEO_CAPTURE_TYPE_16X9_160":@(VIDEO_CAPTURE_TYPE_16X9_160),
             @"VIDEO_CAPTURE_TYPE_16X9_320":@(VIDEO_CAPTURE_TYPE_16X9_320),
             @"VIDEO_CAPTURE_TYPE_16X9_480":@(VIDEO_CAPTURE_TYPE_16X9_480),
             @"VIDEO_CAPTURE_TYPE_16X9_640":@(VIDEO_CAPTURE_TYPE_16X9_640),
             @"VIDEO_CAPTURE_TYPE_16X9_800":@(VIDEO_CAPTURE_TYPE_16X9_800),
             @"VIDEO_CAPTURE_TYPE_16X9_960":@(VIDEO_CAPTURE_TYPE_16X9_960),
             @"VIDEO_CAPTURE_TYPE_16X9_1280":@(VIDEO_CAPTURE_TYPE_16X9_1280),
             @"VIDEO_CAPTURE_TYPE_16X9_1920":@(VIDEO_CAPTURE_TYPE_16X9_1920),
             @"VIDEO_CAPTURE_TYPE_4X3_160":@(VIDEO_CAPTURE_TYPE_4X3_160),
             @"VIDEO_CAPTURE_TYPE_4X3_320":@(VIDEO_CAPTURE_TYPE_4X3_320),
             @"VIDEO_CAPTURE_TYPE_4X3_480":@(VIDEO_CAPTURE_TYPE_4X3_480),
             @"VIDEO_CAPTURE_TYPE_4X3_640":@(VIDEO_CAPTURE_TYPE_4X3_640),
             @"VIDEO_CAPTURE_TYPE_4X3_800":@(VIDEO_CAPTURE_TYPE_4X3_800),
             @"VIDEO_CAPTURE_TYPE_4X3_960":@(VIDEO_CAPTURE_TYPE_4X3_960),
             @"VIDEO_CAPTURE_TYPE_4X3_1280":@(VIDEO_CAPTURE_TYPE_4X3_1280),
             @"VIDEO_CAPTURE_TYPE_4X3_1920":@(VIDEO_CAPTURE_TYPE_4X3_1920),
             @"VIDEO_CAPTURE_TYPE_16X16":@(VIDEO_CAPTURE_TYPE_16X16),
             @"NO_ROTATE_TYPE_90":@(NO_ROTATE_TYPE_90),

             @"xRTC_ChannelProfile_Communication":@(xRTC_ChannelProfile_Communication),
             @"xRTC_ChannelProfile_LiveBroadcasting":@(xRTC_ChannelProfile_LiveBroadcasting),

             @"RENDER_TYPE_FULL":@(RENDER_TYPE_FULL),
             @"RENDER_TYPE_ADAPTIVE":@(RENDER_TYPE_ADAPTIVE),
             @"RENDER_TYPE_CROP":@(RENDER_TYPE_CROP),
             @"RENDER_TYPE_AUTO":@(RENDER_TYPE_AUTO),

             @"RTC_EVTID_RESP_LOGINED":@(RTC_EVTID_RESP_LOGINED),
             @"RTC_EVTID_RESP_SET_CHANNEL_ATTR":@(RTC_EVTID_RESP_SET_CHANNEL_ATTR),
             @"RTC_EVTID_RESP_SET_USER_ATTR":@(RTC_EVTID_RESP_SET_USER_ATTR),
             @"RTC_EVTID_RESP_SEND_MSG":@(RTC_EVTID_RESP_SEND_MSG),

             @"RTC_EVTID_NTF_USER_ENTER":@(RTC_EVTID_NTF_USER_ENTER),
             @"RTC_EVTID_NTF_USER_LEAVE":@(RTC_EVTID_NTF_USER_LEAVE),
             @"RTC_EVTID_NTF_SET_CHANNEL_ATTR":@(RTC_EVTID_NTF_SET_CHANNEL_ATTR),
             @"RTC_EVTID_NTF_SET_USER_ATTR":@(RTC_EVTID_NTF_SET_USER_ATTR),
             @"RTC_EVTID_NTF_RECV_MSG":@(RTC_EVTID_NTF_RECV_MSG),
             @"RTC_EVTID_NTF_CONNECT_LOST":@(RTC_EVTID_NTF_CONNECT_LOST),
             @"RTC_EVTID_NTF_CONNECT_RESUME":@(RTC_EVTID_NTF_CONNECT_RESUME),
             @"RTC_EVTID_NTF_DUP_LOGINED":@(RTC_EVTID_NTF_DUP_LOGINED),
             };
}

#pragma mark -- valley nsdictionary

@interface objBase:NSObject
@end

@interface objBaseEvent :objBase
-(int)getEventID;
@end

 
// 响应事件，响应事件都带错误码，ec=0标识成功，ec!=0标识失败，具体失败见错误描述
@interface objRespEvent:objBaseEvent
-(int)getErrorCode;
@end

// 通知事件
@interface objNtfEvent :objBaseEvent
@end 

//响应事件 收到用户登录成功或失败的应答
@interface objRespLogin : objBaseEvent
-(nonnull NSString*)getUserID;
@end
 
//通知事件 收到用户进入房间
@interface objNtfUserEnter : objNtfEvent
-(nonnull NSString*)getUserID;
@end

//通知事件 收到用户离开房间
@interface objNtfUserLeave : objBaseEvent
-(nonnull NSString*)getUserID;
@end
  

@interface objRespMsg : objRespEvent
-(nonnull NSString*)getFromUserID;
-(nullable NSString*)getToUserID;
-(nonnull NSString*)getMessage;
-(nullable NSString*)getToken;
-(int)getMsgType;
-(seond_t)getMsgTime; 
@end

//通知事件 收到用户发来的消息 objNtfMsg
@interface objNtfMsg : objNtfEvent
-(nonnull NSString*)getFromUserID;
-(nullable NSString*)getToUserID;
-(nonnull NSString*)getMessage;
-(nullable NSString*)getToken;
-(int)getMsgType;
-(seond_t)getMsgTime;
@end


//通知事件 收到网络断开的消息
@interface objNtfNetLost : objNtfEvent
@end

//通知事件 收到网络重新连上的消息
@interface objNtfNetResume : objNtfEvent
@end

//通知事件 收到账号异地登录的消息
@interface objNtfDupLogined : objNtfEvent
@end



//收到设置房间属性的应答
@interface objRespSetChannelAttr : objRespEvent
-(nonnull NSString*)attrname;
-(nullable NSString*)attrvalue;
@end


		//收到设置房间属性的通知
@interface objNtfSetChannelAttr : objNtfEvent
-(nonnull NSString*)attrname;
-(nullable NSString*)attrvalue;
@end

//收到设置用户属性的应答
@interface objRespSetUserAttr : objRespEvent
-(nonnull NSString*)userid;
-(nonnull NSString*)attrname;
-(nullable NSString*)attrvalue;
@end

//收到设置用户属性的通知
@interface objNtfSetUserAttr : objNtfEvent
- (nonnull NSString*)userid;
-(nonnull NSString*)attrname;
-(nullable NSString*)attrvalue;
@end

- (NSDictionary*)fromObjUser:(objUser*)user {
    return @{
	@"userid":[user userid],
    };
}


@interface objUser : objBase
- (nonnull NSString*)userid;
-(nullable NSString*)attr:(nonnull NSString*)name;
@end

- (NSDictionary*)fromObjUserList:(objUserList*)userList {
    return @{
    };
}


@interface objUserList : objBase
- (int)count;
-(bool)next;
-(nonnull NSString*)userid;
-(nullable NSString*)attr:(nonnull NSString*)name;
@end

// ===========================================================

-(void)ReleaseObject:(nonnull objBase*)ob; 

#pragma mark -- valley oc api 
  
__attribute__((visibility("default"))) @interface xVideoCanvas : NSObject
@property(strong, nonatomic) UIView* view;
@property(assign, nonatomic) int renderMode;   //RENDER_TYPE_FULL ~ RENDER_TYPE_AUTO
@end


@end
  
