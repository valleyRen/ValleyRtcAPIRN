
#import "RNValleyRtcApi.h"
#import "RNValleyRtcApiInternal.h"
#import <ValleyRtcAPI/ValleyRtcAPI_OC.h>

@implementation RNValleyRtcAPI
{
    BOOL haveListener;
    NSTimer *timer;
    NSMutableDictionary *rtcChannelDic;
    NSInteger channelIndex;
}

- (dispatch_queue_t)methodQueue
{
    return dispatch_get_main_queue();
}

+ (BOOL)requiresMainQueueSetup {
    return YES;
}

- (instancetype)init {
    RCTLogInfo(@"=======  init");
    if ((self = [super init])) {
        rtcChannelDic = [[NSMutableDictionary alloc] init];
        channelIndex = 0;
    }
    return self;
}

- (void)dealloc {
    RCTLogInfo(@"=======  dealloc");
    [rtcChannelDic removeAllObjects];
    if (timer) {
        [timer invalidate];
        timer = nil;
    }
}

RCT_EXPORT_MODULE()

- (NSArray<NSString *> *)supportedEvents
{
    RCTLogInfo(@"=======  supportedEvents");
    return @[@"ValleyCallback"];
}

#pragma mark -- valley handle evnet
- (NSDictionary*)handleRespLogined:(objBase*)obj index:(NSNumber*)index {
    return [self fromObjRespLogin:(objRespLogin*)obj index:index];
}

- (NSDictionary*)handleRespSetChannelAttr:(objBase*)obj index:(NSNumber*)index {
    return [self fromObjRespSetChannelAttr:(objRespSetChannelAttr*)obj index:index];
}

- (NSDictionary*)handleRespSetUserAttr:(objBase*)obj index:(NSNumber*)index {
    return [self fromObjRespSetUserAttr:(objRespSetUserAttr*)obj index:index];
}

- (NSDictionary*)handleRespSendMsg:(objBase*)obj index:(NSNumber*)index {
    return [self fromObjRespMsg:(objRespMsg*)obj index:index];
}

- (NSDictionary*)handleNtfUserEnter:(objBase*)obj index:(NSNumber*)index {
    return [self fromObjNtfUserEnter:(objNtfUserEnter*)obj index:index];
}

- (NSDictionary*)handleNtfUserLeave:(objBase*)obj index:(NSNumber*)index {
    return [self fromObjNtfUserLeave:(objNtfUserLeave*)obj index:index];
}

- (NSDictionary*)handleNtfSetChannelAttr:(objBase*)obj index:(NSNumber*)index {
    return [self fromObjNtfSetChannelAttr:(objNtfSetChannelAttr*)obj index:index];
}

- (NSDictionary*)handleNtfSetUserAttr:(objBase*)obj index:(NSNumber*)index {
    return [self fromObjNtfSetUserAttr:(objNtfSetUserAttr*)obj index:index];
}

- (NSDictionary*)handleNtfRecvMsg:(objBase*)obj index:(NSNumber*)index {
    return [self fromObjNtfMsg:(objNtfMsg*)obj index:index];
}

- (NSDictionary*)handleNtfConnectLost:(objBase*)obj index:(NSNumber*)index {
    return [self fromObjNtfNetLost:(objNtfNetLost*)obj index:index];
}

- (NSDictionary*)handleNtfConnectResume:(objBase*)obj index:(NSNumber*)index {
    return [self fromObjNtfNetResume:(objNtfNetResume*)obj index:index];
}

- (NSDictionary*)handleNtfDupLogined:(objBase*)obj index:(NSNumber*)index {
    return [self fromObjNtfDupLogined:(objNtfDupLogined*)obj index:index];
}

- (NSDictionary*)handleEvent:(objBaseEvent*)event index:(NSNumber*)index {
    SEL method = nil;
    int code = [event getEventID];
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wundeclared-selector"
    switch (code) {
        case RTC_EVTID_RESP_LOGINED:
            method = @selector(handleRespLogined:index:);
            break;
        case RTC_EVTID_RESP_SET_CHANNEL_ATTR:
            method = @selector(handleRespSetChannelAttr:index:);
            break;
        case RTC_EVTID_RESP_SET_USER_ATTR:
            method = @selector(handleRespSetUserAttr:index:);
            break;
        case RTC_EVTID_RESP_SEND_MSG:
            method = @selector(handleRespSendMsg:index:);
            break;
        case RTC_EVTID_NTF_USER_ENTER:
            method = @selector(handleNtfUserEnter:index:);
            break;
        case RTC_EVTID_NTF_USER_LEAVE:
            method = @selector(handleNtfUserLeave:index:);
            break;
        case RTC_EVTID_NTF_SET_CHANNEL_ATTR:
            method = @selector(handleNtfSetChannelAttr:index:);
            break;
        case RTC_EVTID_NTF_SET_USER_ATTR:
            method = @selector(handleNtfSetUserAttr:index:);
            break;
        case RTC_EVTID_NTF_RECV_MSG:
            method = @selector(handleNtfRecvMsg:index:);
            break;
        case RTC_EVTID_NTF_CONNECT_LOST:
            method = @selector(handleNtfConnectLost:index:);
            break;
        case RTC_EVTID_NTF_CONNECT_RESUME:
            method = @selector(handleNtfConnectResume:index:);
            break;
        case RTC_EVTID_NTF_DUP_LOGINED:
            method = @selector(handleNtfDupLogined:index:);
            break;
    }
#pragma clang diagnostic pop
    
    if (method != nil) {
        return [self performSelector:method withObject:(objBase*)event withObject:index];
    }
    RCTLogInfo(@"=======  handleEvent error!!!!!!!!!");
    return nil;
}

- (void)onTimer:(NSTimer*)sender {
    if (haveListener) {
        for (id key in rtcChannelDic) {
            IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:key];
            objBaseEvent *event = [rtcChannel GetEvent];
            if (event) {
                [self sendEventWithName:@"ValleyCallback" body:[self handleEvent:(objBase*)event index:key]];
                [rtcChannel ReleaseEvent:event];
            }
        }
    }
}

- (void)startObserving {
    RCTLogInfo(@"=======  startObserving");
    haveListener = YES;
    if (!timer) {
        timer = [ NSTimer  scheduledTimerWithTimeInterval: 0.5
                                                   target: self
                                                 selector: @selector(onTimer:)
                                                 userInfo:nil
                                                  repeats: YES ];
    }
}

- (void)stopObserving {
    RCTLogInfo(@"=======  stopObserving");
    haveListener = NO;
    if (timer) {
        [timer invalidate];
        timer = nil;
    }
}

#pragma mark -- valley static api

//RCT_EXPORT_METHOD(InitSDK:(nonnull NSString*)workfolder localconfig: (nullable NSString*)localconfig) {
RCT_EXPORT_METHOD(InitSDK) {
    RCTLogInfo(@"=======  InitSDK");
    NSString *documentsDirectory=[NSHomeDirectory() stringByAppendingPathComponent:@"Documents"];
    [[RNValleyRtcApiInternal GetInstance] InitSDK:documentsDirectory localconfig:@""];
}

RCT_EXPORT_METHOD(SetAuthoKey:(nonnull NSString*)authokey) {
    RCTLogInfo(@"=======  SetAuthoKey, authokey = %@", authokey);
    [[RNValleyRtcApiInternal GetInstance] SetAuthoKey:authokey];
}

RCT_EXPORT_METHOD(CleanSDK) {
    RCTLogInfo(@"=======  CleanSDK");
    [[RNValleyRtcApiInternal GetInstance] CleanSDK];
}

RCT_EXPORT_METHOD(GetErrDesc:(NSInteger)ec callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  GetErrDesc, ec = %ld", (long)ec);
    callback(@[ [[RNValleyRtcApiInternal GetInstance] GetErrDesc:ec] ]);
}

RCT_EXPORT_METHOD(GetSDKVersion:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  GetSDKVersion");
    callback(@[ [[RNValleyRtcApiInternal GetInstance] GetSDKVersion] ]);
}

// typedef void (^RCTResponseSenderBlock)(NSArray *response);
// typedef void (^RCTPromiseResolveBlock)(id result);
// typedef void (^RCTPromiseRejectBlock)(NSString *code, NSString *message, NSError *error);
RCT_EXPORT_METHOD(CreateChannel:(BOOL)withVideo resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTLogInfo(@"=======  CreateChannel, withVideo = %d", withVideo);
    IRtcChannel *rtcChannel = [[RNValleyRtcApiInternal GetInstance] CreateChannel:withVideo];
    if (rtcChannel != nil) {
        [rtcChannelDic setObject:rtcChannel forKey:@(channelIndex)];
        resolve(@(channelIndex));
        channelIndex++;
    }
    else {
        reject(@"-5", @"-5", nil);
    }
}

#pragma mark -- valley channel api

RCT_EXPORT_METHOD(ChannelRelease:(NSInteger)index) {
    RCTLogInfo(@"=======  ChannelRelease, index = %ld", (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    if (rtcChannel) {
        [rtcChannel Release];
        [rtcChannelDic removeObjectForKey:@(index)];
    }
}

// TODO: if rtcChannel is nil, should to send error code as "the channel is nil"
RCT_EXPORT_METHOD(ChannelLogout:(NSInteger)index) {
    RCTLogInfo(@"=======  ChannelLogout, index = %ld", (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    if (rtcChannel) {
        [rtcChannel Logout];
    }
}

RCT_EXPORT_METHOD(ChannelGetLoginStatus:(NSInteger)index callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelGetLoginStatus, index = %ld", (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel GetLoginStatus];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelEnableInterface:(NSInteger)index iids:(NSInteger)iids callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableInterface, iids = %ld, index = %ld", (long)iids, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel EnableInterface:iids];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelLogin:(NSInteger)index channelid:(nonnull NSString*)channelid userid:(nonnull NSString*)userid callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelLogin, channelid = %@, userid = %@, index = %ld", channelid, userid, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel Login:channelid userid:userid];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelSendMsgr:(NSInteger)index msgtype:(int)msgtype msg:(nonnull NSString*)msg  token:(nullable NSString*)token toUID:(nullable NSString*)toUID callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSendMsgr, msgtype = %d, msg = %@, token = %@, toUID = %@, index = %ld", msgtype, msg, token, toUID, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel SendMsgr:msgtype msg:msg token:token toUID:toUID];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelSetVideoProfileint:(NSInteger)index profile:(int)profile callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetVideoProfileint, profile = %d, index = %ld", profile, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel SetVideoProfileint:profile];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelSetLocalVideo:(NSInteger)index hVideo:(nonnull xVideoCanvas*)hVideo callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetLocalVideo, hVideo = %p, index = %ld", hVideo, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel SetLocalVideo:hVideo];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelRemoveLocalVideo:(NSInteger)index callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelRemoveLocalVideo, index = %ld", (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel RemoveLocalVideo];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelSetUserVideo:(NSInteger)index userid:(nonnull NSString*)userid hVideo:(nonnull xVideoCanvas*)hVideo callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetUserVideo, userid = %@, hVideo = %p, index = %ld", userid, hVideo, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel SetUserVideo:userid hVideo:hVideo];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelRemoveUserVideo:(NSInteger)index userid:(nonnull NSString*)userid callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelRemoveUserVideo, userid = %@, index = %ld", userid, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel RemoveUserVideo:userid];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelEnableLocalAudio:(NSInteger)index callback:(BOOL)bEnable callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableLocalAudio, bEnable = %d, index = %ld", bEnable, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel EnableLocalAudio:bEnable];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelEnableLocalVideo:(NSInteger)index bEnable:(BOOL)bEnable callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableLocalVideo, bEnable = %d, index = %ld", bEnable, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel EnableLocalVideo:bEnable];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelEnableRemoteAudio:(NSInteger)index userid:(nonnull NSString*)userid bEnable:(BOOL)b callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableRemoteAudio, userid = %@, bEnable = %d, index = %ld", userid, b, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel EnableRemoteAudio:userid bEnable:b];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelEnableRemoteVideo:(NSInteger)index userid:(nonnull NSString*)userid bEnable:(BOOL)b callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableRemoteVideo, userid = %@, bEnable = %d, index = %ld", userid, b, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel EnableRemoteVideo:userid bEnable:b];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelDisableAudio:(NSInteger)index bDisabled:(BOOL)bDisabled callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelDisableAudio, bDisabled = %d, index = %ld", bDisabled, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel DisableAudio:bDisabled];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelDisableVideo:(NSInteger)index callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelDisableVideo, index = %ld", (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel DisableVideo];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelSwitchCamera:(NSInteger)index callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSwitchCamera, index = %ld", (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel SwitchCamera];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelSetChannelAttr:(NSInteger)index name:(nonnull NSString*)name value:(nullable NSString*)value callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetChannelAttr, name = %@, value = %@, index = %ld", name, value, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel SetChannelAttr:name value:value];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelSetUserAttr:(NSInteger)index uid:(nonnull NSString*)uid name:(nonnull NSString*)name value:(nullable NSString*)value callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetUserAttr, uid = %@, name = %@, value = %@, index = %ld", uid, name, value, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    int ec = ERR_NOT_INITIALIZE;
    if (rtcChannel) {
        ec = [rtcChannel SetUserAttr:uid name:name value:value];
    }
    callback(@[ @(ec) ]);
}

RCT_EXPORT_METHOD(ChannelGetChannelAttr:(NSInteger)index name:(nonnull NSString*)name callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelGetChannelAttr, name = %@, index = %ld", name, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    if (rtcChannel) {
        callback(@[ [rtcChannel GetChannelAttr:name] ]);
    }
    else {
        callback(@[ [NSNull null] ]);
    }
}

RCT_EXPORT_METHOD(ChannelGetUserAttr:(NSInteger)index uid:(nonnull NSString*)uid name:(nonnull NSString*)name callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelGetUserAttr, uid = %@, name = %@, index = %ld", uid, name, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    if (rtcChannel) {
        callback(@[ [rtcChannel GetUserAttr:uid name:name] ]);
    }
    else {
        callback(@[ [NSNull null] ]);
    }
}

RCT_EXPORT_METHOD(ChannelGetUser:(NSInteger)index uid:(nonnull NSString*)uid resolve:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTLogInfo(@"=======  ChannelGetUser, uid = %@, index = %ld", uid, (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    if (rtcChannel) {
        objUser *u = [rtcChannel GetUser:uid];
        if (u == nil ) {
            // TODO: !!!!
            reject(@"-5", @"-5", nil);
        }
        else {
            resolve([self fromObjUser:u]);
        }
    }
    else {
        // TODO: !!!!
        reject(@"-5", @"-5", nil);
    }
}

RCT_EXPORT_METHOD(ChannelGetUserList:(NSInteger)index resolve:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTLogInfo(@"=======  ChannelGetUserList, index = %ld", (long)index);
    IRtcChannel *rtcChannel = [rtcChannelDic objectForKey:@(index)];
    if (rtcChannel) {
        objUserList *ul = [rtcChannel GetUserList];
        if (ul == nil ) {
            // TODO: !!!!
            reject(@"-5", @"-5", nil);
        }
        else {
            resolve([self fromObjUserList:ul]);
        }
    }
    else {
        // TODO: !!!!
        reject(@"-5", @"-5", nil);
    }
}

#pragma mark -- valley const
- (NSDictionary*)constantsToExport {
    RCTLogInfo(@"=======  constantsToExport");
    return @{@"ERR_SUCCEED":@(ERR_SUCCEED),
             @"ERR_NOT_LOGINED":@(ERR_NOT_LOGINED),
             @"ERR_ALREADY_RUN":@(ERR_ALREADY_RUN),
             @"ERR_USER_NOTFOUND":@(ERR_USER_NOTFOUND),
             @"ERR_EXCUTING":@(ERR_EXCUTING),
             @"ERR_NOT_INITIALIZE":@(ERR_NOT_INITIALIZE),
             @"ERR_UNSUPPORT":@(ERR_UNSUPPORT),
             @"ERR_ARGUMENT":@(ERR_ARGUMENT),
             @"ERR_CHANNEL_EXPIRED":@(ERR_CHANNEL_EXPIRED),
             @"ERR_CONNECT_SERVER_FAILED":@(ERR_CONNECT_SERVER_FAILED),
             @"ERR_REQUEST_TIMEOUT":@(ERR_REQUEST_TIMEOUT),
             @"ERR_CONFIG":@(ERR_CONFIG),
             @"ERR_NET_POOL":@(ERR_NET_POOL),
             @"ERR_VERSION_UNSUPPORTED":@(ERR_VERSION_UNSUPPORTED),
             @"ERR_AUTHO_FAILED":@(ERR_AUTHO_FAILED),
             @"ERR_NOT_ENOUGH_CHANNEL":@(ERR_NOT_ENOUGH_CHANNEL),
             @"ERR_SERVER_ERROR":@(ERR_SERVER_ERROR),
             @"ERR_OPEN_RECORD":@(ERR_OPEN_RECORD),
             @"ERR_OPEN_PLAYOUT":@(ERR_OPEN_PLAYOUT),
             @"ERR_RECORD_PERMISSION":@(ERR_RECORD_PERMISSION),
             
             @"IID_USERS":@(IID_USERS),
             @"IID_AUDIO":@(IID_AUDIO),
             @"IID_RTCMSGR":@(IID_RTCMSGR),
             
             @"STATUS_NONE":@(STATUS_NONE),
             @"STATUS_LOGINED":@(STATUS_LOGINED),
             @"STATUS_LOGINING":@(STATUS_LOGINING),
             
             @"TYPE_TEXT":@(typeText),
             @"TYPE_AUDIO":@(typeAudio),
             @"TYPE_BINARY":@(typeBinary),
             @"TYPE_CMD":@(typeCmd),
             
             @"VIDEO_CAPTURE_TYPE_16X9_160":@(VIDEO_CAPTURE_TYPE_16X9_160),
             @"VIDEO_CAPTURE_TYPE_16X9_320":@(VIDEO_CAPTURE_TYPE_16X9_320),
             @"VIDEO_CAPTURE_TYPE_16X9_480":@(VIDEO_CAPTURE_TYPE_16X9_480),
             @"VIDEO_CAPTURE_TYPE_16X9_640":@(VIDEO_CAPTURE_TYPE_16X9_640),
             @"VIDEO_CAPTURE_TYPE_16X9_800":@(VIDEO_CAPTURE_TYPE_16X9_800),
             @"VIDEO_CAPTURE_TYPE_16X9_960":@(VIDEO_CAPTURE_TYPE_16X9_960),
             @"VIDEO_CAPTURE_TYPE_16X9_1280":@(VIDEO_CAPTURE_TYPE_16X9_1280),
             @"VIDEO_CAPTURE_TYPE_16X9_1920":@(VIDEO_CAPTURE_TYPE_16X9_1920),
             @"VIDEO_CAPTURE_TYPE_4X3_160":@(VIDEO_CAPTURE_TYPE_4X3_160),
             @"VIDEO_CAPTURE_TYPE_4X3_320":@(VIDEO_CAPTURE_TYPE_4X3_320),
             @"VIDEO_CAPTURE_TYPE_4X3_480":@(VIDEO_CAPTURE_TYPE_4X3_480),
             @"VIDEO_CAPTURE_TYPE_4X3_640":@(VIDEO_CAPTURE_TYPE_4X3_640),
             @"VIDEO_CAPTURE_TYPE_4X3_800":@(VIDEO_CAPTURE_TYPE_4X3_800),
             @"VIDEO_CAPTURE_TYPE_4X3_960":@(VIDEO_CAPTURE_TYPE_4X3_960),
             @"VIDEO_CAPTURE_TYPE_4X3_1280":@(VIDEO_CAPTURE_TYPE_4X3_1280),
             @"VIDEO_CAPTURE_TYPE_4X3_1920":@(VIDEO_CAPTURE_TYPE_4X3_1920),
             @"VIDEO_CAPTURE_TYPE_16X16":@(VIDEO_CAPTURE_TYPE_16X16),
             @"NO_ROTATE_TYPE_90":@(NO_ROTATE_TYPE_90),
             
             @"XRTC_CHANNELPROFILE_COMMUNICATION":@(xRTC_ChannelProfile_Communication),
             @"XRTC_CHANNELPROFILE_LIVEbROADCASTING":@(xRTC_ChannelProfile_LiveBroadcasting),
             
             @"RENDER_TYPE_FULL":@(RENDER_TYPE_FULL),
             @"RENDER_TYPE_ADAPTIVE":@(RENDER_TYPE_ADAPTIVE),
             @"RENDER_TYPE_CROP":@(RENDER_TYPE_CROP),
             @"RENDER_TYPE_AUTO":@(RENDER_TYPE_AUTO),
             
             @"RTC_EVTID_RESP_LOGINED":@(RTC_EVTID_RESP_LOGINED),
             @"RTC_EVTID_RESP_SET_CHANNEL_ATTR":@(RTC_EVTID_RESP_SET_CHANNEL_ATTR),
             @"RTC_EVTID_RESP_SET_USER_ATTR":@(RTC_EVTID_RESP_SET_USER_ATTR),
             @"RTC_EVTID_RESP_SEND_MSG":@(RTC_EVTID_RESP_SEND_MSG),
             
             @"RTC_EVTID_NTF_USER_ENTER":@(RTC_EVTID_NTF_USER_ENTER),
             @"RTC_EVTID_NTF_USER_LEAVE":@(RTC_EVTID_NTF_USER_LEAVE),
             @"RTC_EVTID_NTF_SET_CHANNEL_ATTR":@(RTC_EVTID_NTF_SET_CHANNEL_ATTR),
             @"RTC_EVTID_NTF_SET_USER_ATTR":@(RTC_EVTID_NTF_SET_USER_ATTR),
             @"RTC_EVTID_NTF_RECV_MSG":@(RTC_EVTID_NTF_RECV_MSG),
             @"RTC_EVTID_NTF_CONNECT_LOST":@(RTC_EVTID_NTF_CONNECT_LOST),
             @"RTC_EVTID_NTF_CONNECT_RESUME":@(RTC_EVTID_NTF_CONNECT_RESUME),
             @"RTC_EVTID_NTF_DUP_LOGINED":@(RTC_EVTID_NTF_DUP_LOGINED),
             };
}

#pragma mark -- valley nsdictionary

- (NSDictionary*)fromObjRespLogin:(objRespLogin*)in index:(NSNumber*)index {
    RCTLogInfo(@"=======  fromObjRespLogin, code = %d, event = %d, index = %@, userid = %@", [in getErrorCode], [in getEventID], index, [in getUserID]);
    return @{
             @"code":@([in getErrorCode]),
             @"event":@([in getEventID]),
             @"index":index,
             @"userid":[in getUserID],
             };
}

- (NSDictionary*)fromObjNtfUserEnter:(objNtfUserEnter*)in index:(NSNumber*)index {
    RCTLogInfo(@"=======  fromObjNtfUserEnter, code = %@, event = %d, index = %@, userid = %@", @(ERR_SUCCEED), [in getEventID], index, [in getUserID]);
    return @{
             @"code":@(ERR_SUCCEED),
             @"event":@([in getEventID]),
             @"index":index,
             @"userid":[in getUserID],
             };
}

- (NSDictionary*)fromObjNtfUserLeave:(objNtfUserLeave*)in index:(NSNumber*)index {
    RCTLogInfo(@"=======  fromObjNtfUserLeave, code = %@, event = %d, index = %@, userid = %@", @(ERR_SUCCEED), [in getEventID], index, [in getUserID]);
    return @{
             @"code":@(ERR_SUCCEED),
             @"event":@([in getEventID]),
             @"index":index,
             @"userid":[in getUserID],
             };
}

- (NSDictionary*)fromObjRespMsg:(objRespMsg*)in index:(NSNumber*)index {
    RCTLogInfo(@"=======  fromObjRespMsg, code = %@, event = %d, index = %@, from_userid = %@, to_userid = %@, msg = %@, token = %@, msg_type = %@, msg_time = %@", @([in getErrorCode]), [in getEventID], index, [in getFromUserID], [in getToUserID], [in getMessage], [in getToken], @([in getMsgType]), @([in getMsgTime]));
    return @{
             @"code":@([in getErrorCode]),
             @"event":@([in getEventID]),
             @"index":index,
             @"from_userid":[in getFromUserID],
             @"to_userid":[in getToUserID],
             @"msg":[in getMessage],
             @"token":[in getToken],
             @"msg_type":@([in getMsgType]),
             @"msg_time":@([in getMsgTime]),
             };
}

- (NSDictionary*)fromObjNtfMsg:(objNtfMsg*)in index:(NSNumber*)index {
    RCTLogInfo(@"=======  fromObjNtfMsg, code = %@, event = %d, index = %@, from_userid = %@, to_userid = %@, msg = %@, token = %@, msg_type = %@, msg_time = %@", @(ERR_SUCCEED), [in getEventID], index, [in getFromUserID], [in getToUserID], [in getMessage], [in getToken], @([in getMsgType]), @([in getMsgTime]));
    return @{
             @"code":@(ERR_SUCCEED),
             @"event":@([in getEventID]),
             @"index":index,
             @"from_userid":[in getFromUserID],
             @"to_userid":[in getToUserID],
             @"msg":[in getMessage],
             @"token":[in getToken],
             @"msg_type":@([in getMsgType]),
             @"msg_time":@([in getMsgTime]),
             };
}

- (NSDictionary*)fromObjNtfNetLost:(objNtfNetLost*)in index:(NSNumber*)index {
    RCTLogInfo(@"=======  fromObjNtfNetLost, code = %@, event = %d, index = %@", @(ERR_SUCCEED), [in getEventID], index);
    return @{
             @"code":@(ERR_SUCCEED),
             @"event":@([in getEventID]),
             @"index":index,
             };
}

- (NSDictionary*)fromObjNtfNetResume:(objNtfNetResume*)in index:(NSNumber*)index {
    RCTLogInfo(@"=======  fromObjNtfNetResume, code = %@, event = %d, index = %@", @(ERR_SUCCEED), [in getEventID], index);
    return @{
             @"code":@(ERR_SUCCEED),
             @"event":@([in getEventID]),
             @"index":index,
             };
}

- (NSDictionary*)fromObjNtfDupLogined:(objNtfDupLogined*)in index:(NSNumber*)index {
    RCTLogInfo(@"=======  fromObjNtfDupLogined, code = %@, event = %d, index = %@", @(ERR_SUCCEED), [in getEventID], index);
    return @{
             @"code":@(ERR_SUCCEED),
             @"event":@([in getEventID]),
             @"index":index,
             };
}

- (NSDictionary*)fromObjRespSetChannelAttr:(objRespSetChannelAttr*)in index:(NSNumber*)index {
    RCTLogInfo(@"=======  fromObjRespSetChannelAttr, code = %@, event = %d, index = %@, attr_name = %@, attr_value = %@", @([in getErrorCode]), [in getEventID], index, [in attrname], [in attrvalue]);
    return @{
             @"code":@([in getErrorCode]),
             @"event":@([in getEventID]),
             @"index":index,
             @"attr_name":[in attrname],
             @"attr_value":[in attrvalue],
             };
}

- (NSDictionary*)fromObjNtfSetChannelAttr:(objNtfSetChannelAttr*)in index:(NSNumber*)index {
    RCTLogInfo(@"=======  fromObjNtfSetChannelAttr, code = %@, event = %d, index = %@, attr_name = %@, attr_value = %@", @(ERR_SUCCEED), [in getEventID], index, [in attrname], [in attrvalue]);
    return @{
             @"code":@(ERR_SUCCEED),
             @"event":@([in getEventID]),
             @"index":index,
             @"attr_name":[in attrname],
             @"attr_value":[in attrvalue],
             };
}

- (NSDictionary*)fromObjRespSetUserAttr:(objRespSetUserAttr*)in index:(NSNumber*)index {
    RCTLogInfo(@"=======  fromObjRespSetUserAttr, code = %@, event = %d, index = %@, userid = %@, attr_name = %@, attr_value = %@", @([in getErrorCode]), [in getEventID], index, [in userid], [in attrname], [in attrvalue]);
    return @{
             @"code":@([in getErrorCode]),
             @"event":@([in getEventID]),
             @"index":index,
             @"userid":[in userid],
             @"attr_name":[in attrname],
             @"attr_value":[in attrvalue],
             };
}

- (NSDictionary*)fromObjNtfSetUserAttr:(objNtfSetUserAttr*)in index:(NSNumber*)index {
    RCTLogInfo(@"=======  fromObjNtfSetUserAttr, code = %@, event = %d, index = %@, userid = %@, attr_name = %@, attr_value = %@", @(ERR_SUCCEED), [in getEventID], index, [in userid], [in attrname], [in attrvalue]);
    return @{
             @"code":@(ERR_SUCCEED),
             @"event":@([in getEventID]),
             @"index":index,
             @"userid":[in userid],
             @"attr_name":[in attrname],
             @"attr_value":[in attrvalue],
             };
}

- (NSDictionary*)fromObjUser:(objUser*)in {
    // TODO: only return user id, attr will use function to get
    RCTLogInfo(@"=======  fromObjUser, userid = %@", [in userid]);
    return @{
             @"userid":[in userid],
             };
}

- (NSDictionary*)fromObjUserList:(objUserList*)in {
    NSMutableArray *array = [[NSMutableArray alloc] init];
    while ([in next]) {
        NSString* userid = [in userid];
        [array addObject:userid];
    }
    
    RCTLogInfo(@"=======  fromObjUserList, count = %@, user_id_list = %@", @([in count]), array);
    return @{
             @"count":@([in count]),
             @"user_id_list":array,
             };
}

// ===========================================================

/*
 -(void)ReleaseObject:(nonnull objBase*)ob;
 
 #pragma mark -- valley oc api
 
 __attribute__((visibility("default"))) @interface xVideoCanvas : NSObject
 @property(strong, nonatomic) UIView* view;
 @property(assign, nonatomic) int renderMode;   //RENDER_TYPE_FULL ~ RENDER_TYPE_AUTO
 @end
 */

@end

