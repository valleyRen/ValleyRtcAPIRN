
#import "RNValleyRtcApi.h"
#import "RNValleyRtcApiInternal.h"
#import <ValleyRtcAPI/ValleyRtcAPI_OC.h>

@implementation RNValleyRtcApi
{
    BOOL haveListener;
    NSTimer *timer;
    IRtcChannel *rtcChannel;
}

- (dispatch_queue_t)methodQueue
{
    return dispatch_get_main_queue();
}

+ (BOOL)requiresMainQueueSetup {
    return YES;
}

- (void)dealloc {
}

RCT_EXPORT_MODULE()

- (NSArray<NSString *> *)supportedEvents
{
    RCTLogInfo(@"=======  supportedEvents");
    return @[@"ValleyCallback"];
}

#pragma mark -- valley handle evnet 
- (NSDictionary*)handleRespLogined:(objBase*)obj {
    return [self fromObjRespLogin:(objRespLogin*)obj];
}

- (NSDictionary*)handleRespSetChannelAttr:(objBase*)obj {
    return [self fromObjRespSetChannelAttr:(objRespSetChannelAttr*)obj];
}

- (NSDictionary*)handleRespSetUserAttr:(objBase*)obj {
    return [self fromObjRespSetUserAttr:(objRespSetUserAttr*)obj];
}

- (NSDictionary*)handleRespSendMsg:(objBase*)obj {
    return [self fromObjRespMsg:(objRespMsg*)obj];
}

- (NSDictionary*)handleNtfUserEnter:(objBase*)obj {
    return [self fromObjNtfUserEnter:(objNtfUserEnter*)obj];
}

- (NSDictionary*)handleNtfUserLeave:(objBase*)obj {
    return [self fromObjNtfUserLeave:(objNtfUserLeave*)obj];
}

- (NSDictionary*)handleNtfSetChannelAttr:(objBase*)obj {
    return [self fromObjNtfSetChannelAttr:(objNtfSetChannelAttr*)obj];
}

- (NSDictionary*)handleNtfSetUserAttr:(objBase*)obj {
    return [self fromObjNtfSetUserAttr:(objNtfSetUserAttr*)obj];
}

- (NSDictionary*)handleNtfRecvMsg:(objBase*)obj {
    return [self fromObjNtfMsg:(objNtfMsg*)obj];
}

- (NSDictionary*)handleNtfConnectLost:(objBase*)obj {
    return [self fromObjNtfNetLost:(objNtfNetLost*)obj];
}

- (NSDictionary*)handleNtfConnectResume:(objBase*)obj {
    return [self fromObjNtfNetResume:(objNtfNetResume*)obj];
}

- (NSDictionary*)handleNtfDupLogined:(objBase*)obj {
    return [self fromObjNtfDupLogined:(objNtfDupLogined*)obj];
}

- (NSDictionary*)handleEvent:(objBaseEvent*)event {
    SEL method = nil;
    int code = [event getEventID];
    switch (code) {
	case RTC_EVTID_RESP_LOGINED:
	    method = @selector(handleRespLogined:);
	    break;
	case RTC_EVTID_RESP_SET_CHANNEL_ATTR:
	    method = @selector(handleRespSetChannelAttr:);
	    break;
	case RTC_EVTID_RESP_SET_USER_ATTR:
	    method = @selector(handleRespSetUserAttr:);
	    break;
	case RTC_EVTID_RESP_SEND_MSG:
	    method = @selector(handleRespSendMsg:);
	    break;
	case RTC_EVTID_NTF_USER_ENTER:
	    method = @selector(handleNtfUserEnter:);
	    break;
	case RTC_EVTID_NTF_USER_LEAVE:
	    method = @selector(handleNtfUserLeave:);
	    break;
	case RTC_EVTID_NTF_SET_CHANNEL_ATTR:
	    method = @selector(handleNtfSetChannelAttr:);
	    break;
	case RTC_EVTID_NTF_SET_USER_ATTR:
	    method = @selector(handleNtfSetUserAttr:);
	    break;
	case RTC_EVTID_NTF_RECV_MSG:
	    method = @selector(handleNtfRecvMsg:);
	    break;
	case RTC_EVTID_NTF_CONNECT_LOST:
	    method = @selector(handleNtfConnectLost:);
	    break;
	case RTC_EVTID_NTF_CONNECT_RESUME:
	    method = @selector(handleNtfConnectResume:);
	    break;
	case RTC_EVTID_NTF_DUP_LOGINED:
	    method = @selector(handleNtfDupLogined:);
	    break;
    }

    if (method != nil) {
        NSDictionary* out = [self performSelector:method withObject:(objBase*)event];
        NSError *error = nil;
        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:out options:NSJSONWritingPrettyPrinted error:&error];
        if (error) {
            RCTLogInfo(@"==== error code = %@, domain = %@", error.code, error.domain);
        }
        RCTLogInfo(@"%@", [[NSString alloc]initWithData:jsonData encoding:NSUTF8StringEncoding]);
        return out;
    }
    RCTLogInfo(@"=======  handleEvent error!!!!!!!!!");
    return nil;
}

- (void)onTimer:(NSTimer*)sender {
//    static int g_Count = 0;
//    [self sendEventWithName:@"ValleyCallback" body:@{@"code":@(g_Count++), @"userid":@"nimeide"}];
//    return;
    if (haveListener && rtcChannel) {
	objBaseEvent *event = [rtcChannel GetEvent];
	if (event) {
	    [self sendEventWithName:@"ValleyCallback" body:[self handleEvent:(objBase*)event]];
	    [rtcChannel ReleaseEvent:event];
	}
    }
}

- (void)startObserving {
    RCTLogInfo(@"=======  startObserving");
    haveListener = YES;
    if (!timer) {
        timer = [ NSTimer  scheduledTimerWithTimeInterval: 0.5
                                               target: self
                                               selector: @selector(onTimer:)
                                               userInfo:nil
                                               repeats: YES ];
    }
}

- (void)stopObserving {
    RCTLogInfo(@"=======  stopObserving");
    haveListener = NO;
    if (timer) {
        [timer invalidate];
        timer = nil;
    }
}

#pragma mark -- valley static api

//RCT_EXPORT_METHOD(InitSDK:(nonnull NSString*)workfolder localconfig: (nullable NSString*)localconfig) {
RCT_EXPORT_METHOD(InitSDK) {
    RCTLogInfo(@"=======  InitSDK");
    NSString *documentsDirectory=[NSHomeDirectory() stringByAppendingPathComponent:@"Documents"];
    [[RNValleyRtcApiInternal GetInstance] InitSDK:documentsDirectory localconfig:@""];
}

RCT_EXPORT_METHOD(SetAuthoKey:(nonnull NSString*)authokey) {
    RCTLogInfo(@"=======  SetAuthoKey, authokey = %@", authokey);
    [[RNValleyRtcApiInternal GetInstance] SetAuthoKey:authokey];
}

RCT_EXPORT_METHOD(CleanSDK) {
    RCTLogInfo(@"=======  CleanSDK");
    [[RNValleyRtcApiInternal GetInstance] CleanSDK];
}

RCT_EXPORT_METHOD(GetErrDesc:(int)ec callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  GetErrDesc, ec = %d", ec);
    callback(@[ [[RNValleyRtcApiInternal GetInstance] GetErrDesc:ec] ]);
}

RCT_EXPORT_METHOD(GetSDKVersion:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  GetSDKVersion");
    callback(@[ [[RNValleyRtcApiInternal GetInstance] GetSDKVersion] ]);
}

// typedef void (^RCTResponseSenderBlock)(NSArray *response);
// typedef void (^RCTPromiseResolveBlock)(id result);
// typedef void (^RCTPromiseRejectBlock)(NSString *code, NSString *message, NSError *error);
RCT_EXPORT_METHOD(CreateChannel:(BOOL)withVideo resolve:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTLogInfo(@"=======  CreateChannel, withVideo = %d", withVideo);
    if (rtcChannel != nil) {
	// TODO: how to do????? channel have > 1 instance
    }

    rtcChannel = [[RNValleyRtcApiInternal GetInstance] CreateChannel:withVideo]; 
    if (rtcChannel != nil) {
	resolve(@[ [NSNull null] ]);
    }
    else {
	// TODO: the callback need to return failed code, but is not defined!!!!!!
	reject(@"Create channel failed", nil, nil);
    }
}

#pragma mark -- valley channel api

RCT_EXPORT_METHOD(ChannelRelease) {
    RCTLogInfo(@"=======  ChannelRelease");
    if (rtcChannel) {
	[rtcChannel Release];

	// TODO:!!!!
	rtcChannel = nil;
    }
}

// TODO: if rtcChannel is nil, should to send error code as "the channel is nil"
RCT_EXPORT_METHOD(ChannelLogout) {
    RCTLogInfo(@"=======  ChannelLogout");
    if (rtcChannel) {
	[rtcChannel Logout];
    }
}

RCT_EXPORT_METHOD(ChannelGetLoginStatus:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelGetLoginStatus");
    if (rtcChannel) {
	callback(@[ @([rtcChannel GetLoginStatus]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelEnableInterface:(int)iids callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableInterface, iids = %d", iids);
    if (rtcChannel) {
	callback(@[ @([rtcChannel EnableInterface:iids]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelLogin:(nonnull NSString*)channelid userid:(nonnull NSString*)userid callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelLogin, channelid = %@, userid = %@", channelid, userid);
    if (rtcChannel) {
	callback(@[ @([rtcChannel Login:channelid userid:userid]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelSendMsgr:(int)msgtype msg:(nonnull NSString*)msg  token:(nullable NSString*)token toUID:(nullable NSString*)toUID callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSendMsgr, msgtype = %d, msg = %@, token = %@, toUID = %@", msgtype, msg, token, toUID);
    if (rtcChannel) {
	callback(@[ @([rtcChannel SendMsgr:msgtype msg:msg token:token toUID:toUID]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelSetVideoProfileint:(int)profile callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetVideoProfileint, profile = %d", profile);
    if (rtcChannel) {
	callback(@[ @([rtcChannel SetVideoProfileint:profile]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelSetLocalVideo:(nonnull xVideoCanvas*)hVideo callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetLocalVideo, hVideo = %p", hVideo);
    if (rtcChannel) {
	callback(@[ @([rtcChannel SetLocalVideo:hVideo]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelRemoveLocalVideo:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelRemoveLocalVideo");
    if (rtcChannel) {
    callback(@[ @([rtcChannel RemoveLocalVideo]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelSetUserVideo:(nonnull NSString*)userid hVideo:(nonnull xVideoCanvas*)hVideo callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetUserVideo, userid = %@, hVideo = %p", userid, hVideo);
    if (rtcChannel) {
	callback(@[ @([rtcChannel SetUserVideo:userid hVideo:hVideo]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelRemoveUserVideo:(nonnull NSString*)userid callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelRemoveUserVideo, userid = %@", userid);
    if (rtcChannel) {
	callback(@[ @([rtcChannel RemoveUserVideo:userid]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelEnableLocalAudio:(BOOL)bEnable callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableLocalAudio, bEnable = %d", bEnable);
    if (rtcChannel) {
	callback(@[ @([rtcChannel EnableLocalAudio:bEnable]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelEnableLocalVideo:(BOOL)bEnable callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableLocalVideo, bEnable = %d", bEnable);
    if (rtcChannel) {
	callback(@[ @([rtcChannel EnableLocalVideo:bEnable]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelEnableRemoteAudio:(nonnull NSString*)userid bEnable:(BOOL)b callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableRemoteAudio, userid = %@, bEnable = %d", userid, b);
    if (rtcChannel) {
	callback(@[ @([rtcChannel EnableRemoteAudio:userid bEnable:b]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelEnableRemoteVideo:(nonnull NSString*)userid bEnable:(BOOL)b callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelEnableRemoteVideo, userid = %@, bEnable = %d", userid, b);
    if (rtcChannel) {
	callback(@[ @([rtcChannel EnableRemoteVideo:userid bEnable:b]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelDisableAudio:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelDisableAudio");
    if (rtcChannel) {
	callback(@[ @([rtcChannel DisableAudio]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelDisableVideo:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelDisableVideo");
    if (rtcChannel) {
	callback(@[ @([rtcChannel DisableVideo]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelSwitchCamera:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSwitchCamera");
    if (rtcChannel) {
	callback(@[ @([rtcChannel SwitchCamera]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelSetChannelAttr:(nonnull NSString*)name value:(nullable NSString*)value callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetChannelAttr, name = %@, value = %@", name, value);
    if (rtcChannel) {
	callback(@[ @([rtcChannel SetChannelAttr:name value:value]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelSetUserAttr:(nonnull NSString*)uid name:(nonnull NSString*)name value:(nullable NSString*)value callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelSetUserAttr, uid = %@, name = %@, value = %@", uid, name, value);
    if (rtcChannel) {
	callback(@[ @([rtcChannel SetUserAttr:uid name:name value:value]) ]);
    }
}

RCT_EXPORT_METHOD(ChannelGetChannelAttr:(nonnull NSString*)name callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelGetChannelAttr, name = %@", name);
    if (rtcChannel) {
	callback(@[ [rtcChannel GetChannelAttr:name] ]);
    }
}

RCT_EXPORT_METHOD(ChannelGetUserAttr:(nonnull NSString*)uid name:(nonnull NSString*)name callback:(RCTResponseSenderBlock)callback) {
    RCTLogInfo(@"=======  ChannelGetUserAttr, uid = %@, name = %@", uid, name);
    if (rtcChannel) {
	callback(@[ [rtcChannel GetUserAttr:uid name:name] ]);
    }
}

RCT_EXPORT_METHOD(ChannelGetUser:(nonnull NSString*)uid resolve:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTLogInfo(@"=======  ChannelGetUser, uid = %@", uid);
    if (rtcChannel) {
	objUser *u = [rtcChannel GetUser:uid];
	if (u == nil ) {
	    // TODO: !!!!
	    reject(@"The user is nil", nil, nil);
	}
	else {
	    resolve([self fromObjUser:u]);
	}
    }
    else {
	// TODO: !!!!
	reject(@"The channel is nil", nil, nil);
    }
}

RCT_EXPORT_METHOD(ChannelGetUserList:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    RCTLogInfo(@"=======  ChannelGetUserList");
    if (rtcChannel) {
	objUserList *ul = [rtcChannel GetUserList];
	if (ul == nil ) {
	    // TODO: !!!!
	    reject(@"The user list is nil", nil, nil);
	}
	else {
	    resolve([self fromObjUserList:ul]);
	}
    }
    else {
	// TODO: !!!!
	reject(@"The channel is nil", nil, nil);
    }
}

#pragma mark -- valley const 
- (NSDictionary*)constantsToExport {
    RCTLogInfo(@"=======  constantsToExport");
    return @{@"ERR_SUCCEED":@(ERR_SUCCEED),
             @"ERR_NOT_LOGINED":@(ERR_NOT_LOGINED),
             @"ERR_ALREADY_RUN":@(ERR_ALREADY_RUN),
             @"ERR_USER_NOTFOUND":@(ERR_USER_NOTFOUND),
             @"ERR_EXCUTING":@(ERR_EXCUTING),
             @"ERR_NOT_INITIALIZE":@(ERR_NOT_INITIALIZE),
             @"ERR_UNSUPPORT":@(ERR_UNSUPPORT),
             @"ERR_ARGUMENT":@(ERR_ARGUMENT),
             @"ERR_CHANNEL_EXPIRED":@(ERR_CHANNEL_EXPIRED),
             @"ERR_CONNECT_SERVER_FAILED":@(ERR_CONNECT_SERVER_FAILED),
             @"ERR_REQUEST_TIMEOUT":@(ERR_REQUEST_TIMEOUT),
             @"ERR_CONFIG":@(ERR_CONFIG),
             @"ERR_NET_POOL":@(ERR_NET_POOL),
             @"ERR_VERSION_UNSUPPORTED":@(ERR_VERSION_UNSUPPORTED),
             @"ERR_AUTHO_FAILED":@(ERR_AUTHO_FAILED),
             @"ERR_NOT_ENOUGH_CHANNEL":@(ERR_NOT_ENOUGH_CHANNEL),
             @"ERR_SERVER_ERROR":@(ERR_SERVER_ERROR),
             @"ERR_OPEN_RECORD":@(ERR_OPEN_RECORD),
             @"ERR_OPEN_PLAYOUT":@(ERR_OPEN_PLAYOUT),
             @"ERR_RECORD_PERMISSION":@(ERR_RECORD_PERMISSION),

             @"IID_USERS":@(IID_USERS),
             @"IID_AUDIO":@(IID_AUDIO),
             @"IID_RTCMSGR":@(IID_RTCMSGR),

             @"STATUS_NONE":@(STATUS_NONE),
             @"STATUS_LOGINED":@(STATUS_LOGINED),
             @"STATUS_LOGINING":@(STATUS_LOGINING),

             @"TYPE_TEXT":@(typeText),
             @"TYPE_AUDIO":@(typeAudio),
             @"TYPE_BINARY":@(typeBinary),
             @"TYPE_CMD":@(typeCmd),

             @"VIDEO_CAPTURE_TYPE_16X9_160":@(VIDEO_CAPTURE_TYPE_16X9_160),
             @"VIDEO_CAPTURE_TYPE_16X9_320":@(VIDEO_CAPTURE_TYPE_16X9_320),
             @"VIDEO_CAPTURE_TYPE_16X9_480":@(VIDEO_CAPTURE_TYPE_16X9_480),
             @"VIDEO_CAPTURE_TYPE_16X9_640":@(VIDEO_CAPTURE_TYPE_16X9_640),
             @"VIDEO_CAPTURE_TYPE_16X9_800":@(VIDEO_CAPTURE_TYPE_16X9_800),
             @"VIDEO_CAPTURE_TYPE_16X9_960":@(VIDEO_CAPTURE_TYPE_16X9_960),
             @"VIDEO_CAPTURE_TYPE_16X9_1280":@(VIDEO_CAPTURE_TYPE_16X9_1280),
             @"VIDEO_CAPTURE_TYPE_16X9_1920":@(VIDEO_CAPTURE_TYPE_16X9_1920),
             @"VIDEO_CAPTURE_TYPE_4X3_160":@(VIDEO_CAPTURE_TYPE_4X3_160),
             @"VIDEO_CAPTURE_TYPE_4X3_320":@(VIDEO_CAPTURE_TYPE_4X3_320),
             @"VIDEO_CAPTURE_TYPE_4X3_480":@(VIDEO_CAPTURE_TYPE_4X3_480),
             @"VIDEO_CAPTURE_TYPE_4X3_640":@(VIDEO_CAPTURE_TYPE_4X3_640),
             @"VIDEO_CAPTURE_TYPE_4X3_800":@(VIDEO_CAPTURE_TYPE_4X3_800),
             @"VIDEO_CAPTURE_TYPE_4X3_960":@(VIDEO_CAPTURE_TYPE_4X3_960),
             @"VIDEO_CAPTURE_TYPE_4X3_1280":@(VIDEO_CAPTURE_TYPE_4X3_1280),
             @"VIDEO_CAPTURE_TYPE_4X3_1920":@(VIDEO_CAPTURE_TYPE_4X3_1920),
             @"VIDEO_CAPTURE_TYPE_16X16":@(VIDEO_CAPTURE_TYPE_16X16),
             @"NO_ROTATE_TYPE_90":@(NO_ROTATE_TYPE_90),

             @"XRTC_CHANNELPROFILE_COMMUNICATION":@(xRTC_ChannelProfile_Communication),
             @"XRTC_CHANNELPROFILE_LIVEbROADCASTING":@(xRTC_ChannelProfile_LiveBroadcasting),

             @"RENDER_TYPE_FULL":@(RENDER_TYPE_FULL),
             @"RENDER_TYPE_ADAPTIVE":@(RENDER_TYPE_ADAPTIVE),
             @"RENDER_TYPE_CROP":@(RENDER_TYPE_CROP),
             @"RENDER_TYPE_AUTO":@(RENDER_TYPE_AUTO),

             @"RTC_EVTID_RESP_LOGINED":@(RTC_EVTID_RESP_LOGINED),
             @"RTC_EVTID_RESP_SET_CHANNEL_ATTR":@(RTC_EVTID_RESP_SET_CHANNEL_ATTR),
             @"RTC_EVTID_RESP_SET_USER_ATTR":@(RTC_EVTID_RESP_SET_USER_ATTR),
             @"RTC_EVTID_RESP_SEND_MSG":@(RTC_EVTID_RESP_SEND_MSG),

             @"RTC_EVTID_NTF_USER_ENTER":@(RTC_EVTID_NTF_USER_ENTER),
             @"RTC_EVTID_NTF_USER_LEAVE":@(RTC_EVTID_NTF_USER_LEAVE),
             @"RTC_EVTID_NTF_SET_CHANNEL_ATTR":@(RTC_EVTID_NTF_SET_CHANNEL_ATTR),
             @"RTC_EVTID_NTF_SET_USER_ATTR":@(RTC_EVTID_NTF_SET_USER_ATTR),
             @"RTC_EVTID_NTF_RECV_MSG":@(RTC_EVTID_NTF_RECV_MSG),
             @"RTC_EVTID_NTF_CONNECT_LOST":@(RTC_EVTID_NTF_CONNECT_LOST),
             @"RTC_EVTID_NTF_CONNECT_RESUME":@(RTC_EVTID_NTF_CONNECT_RESUME),
             @"RTC_EVTID_NTF_DUP_LOGINED":@(RTC_EVTID_NTF_DUP_LOGINED),
             };
}

#pragma mark -- valley nsdictionary

- (NSDictionary*)fromObjRespLogin:(objRespLogin*)in {
    RCTLogInfo(@"=======  fromObjRespLogin, code = %d, event = %d, userid = %@", [in getErrorCode], [in getEventID], [in getUserID]);
    return @{
	@"code":@([in getErrorCode]),
    @"event":@([in getEventID]),
	@"userid":[in getUserID],
    };
}

- (NSDictionary*)fromObjNtfUserEnter:(objNtfUserEnter*)in {
    return @{
	@"code":@(ERR_SUCCEED),
    @"event":@([in getEventID]),
	@"userid":[in getUserID],
    };
}

- (NSDictionary*)fromObjNtfUserLeave:(objNtfUserLeave*)in {
    return @{
	@"code":@(ERR_SUCCEED),
    @"event":@([in getEventID]),
	@"userid":[in getUserID],
    };
}

- (NSDictionary*)fromObjRespMsg:(objRespMsg*)in {
    return @{
	@"code":@([in getErrorCode]),
    @"event":@([in getEventID]),
	@"from_userid":[in getFromUserID],
	@"to_userid":[in getToUserID],
	@"msg":[in getMessage],
	@"token":[in getToken],
	@"msg_type":@([in getMsgType]),
	@"msg_time":@([in getMsgTime]),
    };
}

- (NSDictionary*)fromObjNtfMsg:(objNtfMsg*)in {
    return @{
	@"code":@(ERR_SUCCEED),
    @"event":@([in getEventID]),
	@"from_userid":[in getFromUserID],
	@"to_userid":[in getToUserID],
	@"msg":[in getMessage],
	@"token":[in getToken],
	@"msg_type":@([in getMsgType]),
	@"msg_time":@([in getMsgTime]),
    };
}

- (NSDictionary*)fromObjNtfNetLost:(objNtfNetLost*)in {
    return @{
	@"code":@(ERR_SUCCEED),
    @"event":@([in getEventID]),
    };
}

- (NSDictionary*)fromObjNtfNetResume:(objNtfNetResume*)in {
    return @{
	@"code":@(ERR_SUCCEED),
    @"event":@([in getEventID]),
    };
}

- (NSDictionary*)fromObjNtfDupLogined:(objNtfDupLogined*)in {
    return @{
	@"code":@(ERR_SUCCEED),
    @"event":@([in getEventID]),
    };
}

- (NSDictionary*)fromObjRespSetChannelAttr:(objRespSetChannelAttr*)in {
    return @{
	@"code":@([in getErrorCode]),
    @"event":@([in getEventID]),
	@"attr_name":[in attrname],
	@"attr_value":[in attrvalue],
    };
}

- (NSDictionary*)fromObjNtfSetChannelAttr:(objNtfSetChannelAttr*)in {
    return @{
	@"code":@(ERR_SUCCEED),
    @"event":@([in getEventID]),
	@"attr_name":[in attrname],
	@"attr_value":[in attrvalue],
    };
}

- (NSDictionary*)fromObjRespSetUserAttr:(objRespSetUserAttr*)in {
    return @{
	@"code":@([in getErrorCode]),
    @"event":@([in getEventID]),
	@"userid":[in userid],
	@"attr_name":[in attrname],
	@"attr_value":[in attrvalue],
    };
}

- (NSDictionary*)fromObjNtfSetUserAttr:(objNtfSetUserAttr*)in {
    return @{
	@"code":@(ERR_SUCCEED),
    @"event":@([in getEventID]),
	@"userid":[in userid],
	@"attr_name":[in attrname],
	@"attr_value":[in attrvalue],
    };
}

- (NSDictionary*)fromObjUser:(objUser*)in {
    // TODO: only return user id, attr will use function to get
    return @{
	@"userid":[in userid],
    };
}

- (NSDictionary*)fromObjUserList:(objUserList*)in {
    NSDictionary *out;
    // add @[in count] to NSDictionary;
    while ([in next]) {
        NSString* userid = [in userid];
	// add to NSDictionary
    }
    return out;
}

// ===========================================================

/*
-(void)ReleaseObject:(nonnull objBase*)ob; 

#pragma mark -- valley oc api 
  
__attribute__((visibility("default"))) @interface xVideoCanvas : NSObject
@property(strong, nonatomic) UIView* view;
@property(assign, nonatomic) int renderMode;   //RENDER_TYPE_FULL ~ RENDER_TYPE_AUTO
@end
*/

@end
  
