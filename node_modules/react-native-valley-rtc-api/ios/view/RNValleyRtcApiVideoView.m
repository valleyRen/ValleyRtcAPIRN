#import "RNValleyRtcApiVideoView.h"
#import "../RNValleyRtcApiInternal.h"

#import <React/RCTLog.h>
#import <React/UIView+React.h>

@implementation RNValleyRtcApiVideoView

- (instancetype)init {
    self = [super init];
    if (self) {
        _index = -1;
        _remove = true;
        _local = true;
        _reload = false;
        _userId = nil;
        NSLog(@"=======  RNValleyRtcApiVideoView::init");
    }
    return self;
}

//- (void)didUpdateReactSubviews
//{
////  // RNValleyVideoView expects that the first subview rendered is the mask.
////  UIView *maskView = [self.reactSubviews firstObject];
////  self.maskView = maskView;
////
////  // Add the other subviews to the view hierarchy
////  for (NSUInteger i = 1; i < self.reactSubviews.count; i++) {
////    UIView *subview = [self.reactSubviews objectAtIndex:i];
////    [self addSubview:subview];
////  }
//}
//
//- (void)displayLayer:(CALayer *)layer
//{
//  // RCTView uses displayLayer to do border rendering.
//  // We don't need to do that in RCTMaskedView, so we
//  // stub this method and override the default implementation.
//}

- (void)setIndex:(int)index {
    NSLog(@"=======  setIndex, index = %d", index);
    _index = index;
}

- (void)setRemove:(BOOL)remove {
    NSLog(@"=======  setRemove, remove = %d", remove);
    _remove = remove;
}

- (void)setLocal:(BOOL)local {
    NSLog(@"=======  setLocal, local = %d", local);
    _local = local;
}

- (void)setUserId:(NSString *)userId {
    NSLog(@"=======  setUserId, userId = %@", userId);
    _userId = userId;
}

- (void)setReload:(BOOL)reload {
    _reload = reload;
    NSLog(@"=======  setReload entry, reload = %d, index = %ld, remove = %d, local = %d, userid = %@", _reload ,(long)_index, _remove, _local, _userId);
    if (_reload) {
        int channelIndex = _index;
        if (channelIndex != -1) {
            if (_remove) {
                if (_local) {
                    [[RNValleyRtcApiInternal GetInstance] RemoveLocalVideo:channelIndex];
                }
                else {
                    if (_userId != nil && ![_userId isEqual: @""]) {
                        [[RNValleyRtcApiInternal GetInstance] RemoveUserVideo:channelIndex userid:_userId];
                    }
                }
            }
            else {
#if TARGET_OS_SIMULATOR
                xVideoCanvas *canvas = nil;
#else
                xVideoCanvas *canvas = [xVideoCanvas new];
                canvas.view = self;
                canvas.renderMode = RENDER_TYPE_ADAPTIVE;
                canvas.mirrorMode = MirrorMode_All;
#endif
                if (_local) {
                    [[RNValleyRtcApiInternal GetInstance] SetLocalVideo:channelIndex hVideo:canvas];
                }
                else {
                    if (_userId != nil && ![_userId isEqual: @""]) {
                        [[RNValleyRtcApiInternal GetInstance] SetUserVideo:channelIndex userid:_userId hVideo:canvas];
                    }
                }
            }
        }
    }
    NSLog(@"=======  setReload exit");
}

@end
