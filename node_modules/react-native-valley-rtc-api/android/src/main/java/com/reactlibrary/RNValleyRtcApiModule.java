
package com.reactlibrary;

import android.app.Application;
import android.content.Context;
import android.os.Environment;
import android.util.Log;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.modules.core.DeviceEventManagerModule;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

import valley.api.IRtcChannel;
import valley.api.ValleyRtcAPI;

public class RNValleyRtcApiModule extends ReactContextBaseJavaModule {

  private static final String TAG = "RNValleyRtcApiModule";

  private final ReactApplicationContext reactContext;
  private IRtcChannel rtcChannel = null;

  static private Application valleyApp = null;

  // todo: test const
  private static final String ERR_SUCCEED = "ERR_SUCCEED";

  public RNValleyRtcApiModule(ReactApplicationContext reactContext) {
    super(reactContext);
    this.reactContext = reactContext;
  }

  @Override
  public String getName() {
    return "RNValleyRtcAPI";
  }

  @Override
  public Map<String, Object> getConstants() {
    Log.d(TAG, "===== getConstants: ");
    // todo: test return const
    final Map<String, Object> constants = new HashMap<>();
    constants.put(ERR_SUCCEED, 0);
    return constants;
  }

  // static api
  static public void InitSDK(Application app) {
    Log.d(TAG, "===== InitSDK: app");
    RNValleyRtcApiModule.valleyApp = app;
  }

  // ========== private ====================
  public void chmod777(File file, String root) {
    try {
      if (null == file || !file.exists()) {
        return;
      }

      Runtime.getRuntime().exec("chmod 777 " + file.getAbsolutePath());
      File tempFile = file.getParentFile();
      String tempName = tempFile.getName();
      if (tempFile.getName() == null || "".equals(tempName)) {
        return;
      }
      else if (!root.equals("") && root.equals(tempName)) {
        Runtime.getRuntime().exec("chmod 777 " + tempFile.getAbsolutePath());
        return;
      }

      chmod777(file.getParentFile(), root);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }

  private void mkdirs(String path) {
    try {
      File file = new File(path);
      if (!file.isDirectory()) {
        if (!file.mkdirs()) {
          Log.d("ApplicationEx","mkdir failed");
        }
        chmod777(new File(path), null);
      }
    } catch (Throwable e) {
      e.printStackTrace();
    }
  }

  //    WritableMap params = Arguments.createMap();
//    params.putInt("code", 1);
//    params.putString("userid", "nimeide");
//    sendEvent(params);
  private void channelCallbackToOut(WritableMap params) {
    Log.d(TAG, "===== channelCallbackToOut: ");
    this.reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit("ValleyCallback", params);
  }
  // ========== private ====================

  // =========== react method ==========
  @ReactMethod
  public void InitSDK(String localconfig) {
    Log.d(TAG, "===== InitSDK: local");
    String mDataPath = "";
    try {
      File file = Environment.getExternalStorageDirectory();
      if(!file.exists()) {
        file = Environment.getDataDirectory();
      }

      if(!file.exists()) {
        file =  RNValleyRtcApiModule.valleyApp.getApplicationContext().getFilesDir();
      }

      mDataPath = file.getAbsolutePath() + "/Xrtc";
      mkdirs(mDataPath);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    ValleyRtcAPI.InitSDK(RNValleyRtcApiModule.valleyApp, mDataPath, localconfig);
  }

  @ReactMethod
  public void SetAuthoKey(String authokey) {
    Log.d(TAG, "===== SetAuthoKey: authokey = " + authokey);
    ValleyRtcAPI.SetAuthoKey(authokey);
  }

  @ReactMethod
  public void CleanSDK() {
    Log.d(TAG, "===== CleanSDK: ");
    ValleyRtcAPI.CleanSDK();
  }

  @ReactMethod
  public void GetErrDesc(int ec, Callback callback) {
    Log.d(TAG, "===== GetErrDesc: ec = " + ec);
    callback.invoke(ValleyRtcAPI.GetErrDesc(ec));
  }

  @ReactMethod
  public void GetSDKVersion(Callback callback) {
    Log.d(TAG, "===== GetSDKVersion: ");
    callback.invoke(ValleyRtcAPI.GetSDKVersion());
  }

  @ReactMethod
  public void CreateChannel(boolean withVideo, Promise promise) {
    Log.d(TAG, "===== CreateChannel: withVideo = " + withVideo);
    rtcChannel = ValleyRtcAPI.CreateChannel(withVideo, reactContext);
    if (rtcChannel != null) {
      promise.resolve(null);
    }
    else {
      // IRtcChannel.ERR_NOT_INITIALIZE
      promise.reject("-5", "-5");
    }
  }

  // other
  @ReactMethod
  public void ChannelRelease() {
    Log.d(TAG, "===== ChannelRelease: ");
    if (rtcChannel != null) {
      rtcChannel.Release();
    }
  }

  @ReactMethod
  public void ChannelLogin(String channelid, String userid, Callback callback) {
    Log.d(TAG, "===== ChannelLogin: channelid = " + channelid + ", userid = " + userid);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
      ec = rtcChannel.Login(channelid, userid);
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelLogout() {
    Log.d(TAG, "===== ChannelLogout: ");
    if (rtcChannel != null) {
      rtcChannel.Logout();
    }
  }
}