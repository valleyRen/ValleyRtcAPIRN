
package com.reactlibrary;

import android.content.Context;
import android.util.Log;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.modules.core.DeviceEventManagerModule;

import java.util.HashMap;
import java.util.Map;

public class RNValleyRtcApiModule extends ReactContextBaseJavaModule {

  private static final String TAG = "RNValleyRtcApiModule";

  private final ReactApplicationContext reactContext;

  // todo: test const
  private static final String ERR_SUCCEED = "ERR_SUCCEED";

  public RNValleyRtcApiModule(ReactApplicationContext reactContext) {
    super(reactContext);
    this.reactContext = reactContext;
  }

  @Override
  public String getName() {
    return "RNValleyRtcAPI";
  }

  @Override
  public Map<String, Object> getConstants() {
    Log.d(TAG, "===== getConstants: ");
    // todo: test return const
    final Map<String, Object> constants = new HashMap<>();
    constants.put(ERR_SUCCEED, 0);
    return constants;
  }

  // static api
  @ReactMethod
  public void InitSDK() {
    Log.d(TAG, "===== InitSDK: ");
//    ValleyRtcAPI.InitSDK();
  }

  @ReactMethod
  public void SetAuthoKey(String authokey) {
    Log.d(TAG, "===== SetAuthoKey: authokey = " + authokey);
//    ValleyRtcAPI.SetAuthoKey(authokey);
  }

  @ReactMethod
  public void CleanSDK() {
    Log.d(TAG, "===== CleanSDK: ");
//    ValleyRtcAPI.CleanSDK();
  }

  @ReactMethod
  public void GetErrDesc(int ec, Callback callback) {
    Log.d(TAG, "===== GetErrDesc: ec = " + ec);
    callback.invoke("GetErrDescï¼š" + ec);
//    callback.invoke(ValleyRtcAPI.GetErrDesc(ec));
  }

  @ReactMethod
  public void GetSDKVersion(Callback callback) {
    Log.d(TAG, "===== GetSDKVersion: ");
    callback.invoke("GetSDKVersion");
//    callback.invoke(ValleyRtcAPI.GetSDKVersion());
  }

  @ReactMethod
  public void CreateChannel(boolean withVideo, Promise promise) {
    Log.d(TAG, "===== CreateChannel: withVideo = " + withVideo);
    if (withVideo) {
      promise.resolve(null);
    }
    else {
      promise.reject("zha 1", "zha 2");
    }

    //    ValleyRtcAPI.CreateChannel(withVideo, ctx);
  }


  // other
  @ReactMethod
  public void ChannelRelease() {
    Log.d(TAG, "===== ChannelRelease: ");
  }

  @ReactMethod
  public void ChannelLogin(String channelid, String userid, Callback callback) {
    Log.d(TAG, "===== ChannelLogin: channelid = " + channelid + ", userid = " + userid);
    callback.invoke(0);
  }

  @ReactMethod
  public void ChannelLogout() {
    Log.d(TAG, "===== ChannelLogout: ");

    WritableMap params = Arguments.createMap();
    params.putInt("code", 1);
    params.putString("userid", "nimeide");
    sendEvent(params);
  }

  private void sendEvent(WritableMap params) {
    Log.d(TAG, "===== sendEvent: ");
    this.reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit("sendEvent", params);
  }
}