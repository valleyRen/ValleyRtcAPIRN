
package com.reactlibrary;

import android.app.Application;
import android.content.Context;
import android.os.Environment;
import android.support.annotation.NonNull;
import android.util.Log;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.modules.core.DeviceEventManagerModule;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

import valley.api.IRtcChannel;
import valley.api.IRtcSink;
import valley.api.ValleyRtcAPI;
import valley.api.hvideo_t;
import valley.api.objNtfMsg;
import valley.api.objNtfSetChannelAttr;
import valley.api.objNtfSetUserAttr;
import valley.api.objNtfUserEnter;
import valley.api.objNtfUserLeave;
import valley.api.objRespLogin;
import valley.api.objRespMsg;
import valley.api.objRespSetChannelAttr;
import valley.api.objRespSetUserAttr;
import valley.api.objUser;
import valley.api.objUserList;

public class RNValleyRtcApiModule extends ReactContextBaseJavaModule {

  private static final String TAG = "RNValleyRtcApiModule";
  private static Application valleyApp = null;
  private final ReactApplicationContext reactContext;

  private IRtcChannel rtcChannel = null;
  private RtcSinkImpl impl = new RtcSinkImpl();

  protected class RtcSinkImpl implements IRtcSink {
    @Override
    public void Notify(int type, Object ob, long userdata) {
      WritableMap params = Arguments.createMap();
      params.putInt("code", IRtcChannel.ERR_SUCCEED);
      params.putInt("event", type);
      switch (type) {
        case IRtcSink.RTC_EVTID_NTF_USER_ENTER:
          fromObjNtfUserEnter(ob, params);
          break;
        case IRtcSink.RTC_EVTID_NTF_USER_LEAVE:
          fromObjNtfUserLeave(ob, params);
          break;
        case IRtcSink.RTC_EVTID_NTF_SET_CHANNEL_ATTR:
          fromObjNtfSetChannelAttr(ob, params);
          break;
        case IRtcSink.RTC_EVTID_NTF_SET_USER_ATTR:
          fromObjNtfSetUserAttr(ob, params);
          break;
        case IRtcSink.RTC_EVTID_NTF_RECV_MSG:
          fromObjNtfMsg(ob, params);
          break;
        case IRtcSink.RTC_EVTID_NTF_CONNECT_LOST:
        case IRtcSink.RTC_EVTID_NTF_CONNECT_RESUME:
        case IRtcSink.RTC_EVTID_NTF_DUP_LOGINED:
          break;
      }
      channelCallbackToOut(params);
    }

    @Override
    public void Respond(int type, int ec, Object ob, long userdata) {
      WritableMap params = Arguments.createMap();
      params.putInt("code", ec);
      params.putInt("event", type);
      switch (type) {
        case IRtcSink.RTC_EVTID_RESP_LOGINED:
          fromObjRespLogin(ob, params);
          break;
        case IRtcSink.RTC_EVTID_RESP_SET_CHANNEL_ATTR:
          fromObjRespSetChannelAttr(ob, params);
          break;
        case IRtcSink.RTC_EVTID_RESP_SET_USER_ATTR:
          fromObjRespSetUserAttr(ob, params);
          break;
        case IRtcSink.RTC_EVTID_RESP_SEND_MSG:
          fromObjRespMsg(ob, params);
          break;
      }
      channelCallbackToOut(params);
    }
  }

  public RNValleyRtcApiModule(ReactApplicationContext reactContext) {
    super(reactContext);
    this.reactContext = reactContext;
  }

  @Override
  public String getName() {
    return "RNValleyRtcAPI";
  }

  @Override
  public Map<String, Object> getConstants() {
    Log.d(TAG, "===== getConstants: ");
    // todo: test return const
    final Map<String, Object> constants = new HashMap<>();
    constants.put(RNValleyRtcApiConstants.ERR_SUCCEED, IRtcChannel.ERR_SUCCEED);
    constants.put(RNValleyRtcApiConstants.ERR_NOT_LOGINED, IRtcChannel.ERR_NOT_LOGINED);
    constants.put(RNValleyRtcApiConstants.ERR_ALREADY_RUN, IRtcChannel.ERR_ALREADY_RUN);
    constants.put(RNValleyRtcApiConstants.ERR_USER_NOTFOUND, IRtcChannel.ERR_USER_NOTFOUND);
    constants.put(RNValleyRtcApiConstants.ERR_EXCUTING, IRtcChannel.ERR_EXCUTING);
    constants.put(RNValleyRtcApiConstants.ERR_NOT_INITIALIZE, IRtcChannel.ERR_NOT_INITIALIZE);
    constants.put(RNValleyRtcApiConstants.ERR_UNSUPPORT, IRtcChannel.ERR_UNSUPPORT);
    constants.put(RNValleyRtcApiConstants.ERR_ARGUMENT, IRtcChannel.ERR_ARGUMENT);
    constants.put(RNValleyRtcApiConstants.ERR_CHANNEL_EXPIRED, IRtcChannel.ERR_CHANNEL_EXPIRED);
    constants.put(RNValleyRtcApiConstants.ERR_CONNECT_SERVER_FAILED, IRtcChannel.ERR_CONNECT_SERVER_FAILED);
    constants.put(RNValleyRtcApiConstants.ERR_REQUEST_TIMEOUT, IRtcChannel.ERR_REQUEST_TIMEOUT);
    constants.put(RNValleyRtcApiConstants.ERR_CONFIG, IRtcChannel.ERR_CONFIG);
    constants.put(RNValleyRtcApiConstants.ERR_NET_POOL, IRtcChannel.ERR_NET_POOL);
    constants.put(RNValleyRtcApiConstants.ERR_VERSION_UNSUPPORTED, IRtcChannel.ERR_VERSION_UNSUPPORTED);
    constants.put(RNValleyRtcApiConstants.ERR_AUTHO_FAILED, IRtcChannel.ERR_AUTHO_FAILED);
    constants.put(RNValleyRtcApiConstants.ERR_NOT_ENOUGH_CHANNEL, IRtcChannel.ERR_NOT_ENOUGH_CHANNEL);
    constants.put(RNValleyRtcApiConstants.ERR_SERVER_ERROR, IRtcChannel.ERR_SERVER_ERROR);
    constants.put(RNValleyRtcApiConstants.ERR_OPEN_RECORD, IRtcChannel.ERR_OPEN_RECORD);
    constants.put(RNValleyRtcApiConstants.ERR_OPEN_PLAYOUT, IRtcChannel.ERR_OPEN_PLAYOUT);
    constants.put(RNValleyRtcApiConstants.ERR_RECORD_PERMISSION, IRtcChannel.ERR_RECORD_PERMISSION);
    constants.put(RNValleyRtcApiConstants.IID_USERS, IRtcChannel.IID_USERS);
    constants.put(RNValleyRtcApiConstants.IID_AUDIO, IRtcChannel.IID_AUDIO);
    constants.put(RNValleyRtcApiConstants.IID_RTCMSGR, IRtcChannel.IID_RTCMSGR);
    constants.put(RNValleyRtcApiConstants.STATUS_NONE, IRtcChannel.STATUS_NONE);
    constants.put(RNValleyRtcApiConstants.STATUS_LOGINED, IRtcChannel.STATUS_LOGINED);
    constants.put(RNValleyRtcApiConstants.STATUS_LOGINING, IRtcChannel.STATUS_LOGINING);
    constants.put(RNValleyRtcApiConstants.TYPE_TEXT, IRtcChannel.typeText);
    constants.put(RNValleyRtcApiConstants.TYPE_AUDIO, IRtcChannel.typeAudio);
    constants.put(RNValleyRtcApiConstants.TYPE_BINARY, IRtcChannel.typeBinary);
    constants.put(RNValleyRtcApiConstants.TYPE_CMD, IRtcChannel.typeCmd);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_16X9_160, IRtcChannel.VIDEO_CAPTURE_TYPE_16X9_160);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_16X9_320, IRtcChannel.VIDEO_CAPTURE_TYPE_16X9_320);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_16X9_480, IRtcChannel.VIDEO_CAPTURE_TYPE_16X9_480);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_16X9_640, IRtcChannel.VIDEO_CAPTURE_TYPE_16X9_640);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_16X9_800, IRtcChannel.VIDEO_CAPTURE_TYPE_16X9_800);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_16X9_960, IRtcChannel.VIDEO_CAPTURE_TYPE_16X9_960);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_16X9_1280, IRtcChannel.VIDEO_CAPTURE_TYPE_16X9_1280);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_16X9_1920, IRtcChannel.VIDEO_CAPTURE_TYPE_16X9_1920);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_4X3_160, IRtcChannel.VIDEO_CAPTURE_TYPE_4X3_160);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_4X3_320, IRtcChannel.VIDEO_CAPTURE_TYPE_4X3_320);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_4X3_480, IRtcChannel.VIDEO_CAPTURE_TYPE_4X3_480);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_4X3_640, IRtcChannel.VIDEO_CAPTURE_TYPE_4X3_640);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_4X3_800, IRtcChannel.VIDEO_CAPTURE_TYPE_4X3_800);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_4X3_960, IRtcChannel.VIDEO_CAPTURE_TYPE_4X3_960);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_4X3_1280, IRtcChannel.VIDEO_CAPTURE_TYPE_4X3_1280);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_4X3_1920, IRtcChannel.VIDEO_CAPTURE_TYPE_4X3_1920);
    constants.put(RNValleyRtcApiConstants.VIDEO_CAPTURE_TYPE_16X16, IRtcChannel.VIDEO_CAPTURE_TYPE_16X16);
    constants.put(RNValleyRtcApiConstants.NO_ROTATE_TYPE_90, RNValleyRtcApiConstants.INT_NO_ROTATE_TYPE_90);
    constants.put(RNValleyRtcApiConstants.XRTC_CHANNELPROFILE_COMMUNICATION, RNValleyRtcApiConstants.INT_xRTC_ChannelProfile_Communication);
    constants.put(RNValleyRtcApiConstants.XRTC_CHANNELPROFILE_LIVEbROADCASTING, RNValleyRtcApiConstants.INT_xRTC_ChannelProfile_LiveBroadcasting);
    constants.put(RNValleyRtcApiConstants.RENDER_TYPE_FULL, hvideo_t.RENDER_TYPE_FULL);
    constants.put(RNValleyRtcApiConstants.RENDER_TYPE_ADAPTIVE, hvideo_t.RENDER_TYPE_ADAPTIVE);
    constants.put(RNValleyRtcApiConstants.RENDER_TYPE_CROP, hvideo_t.RENDER_TYPE_CROP);
    constants.put(RNValleyRtcApiConstants.RENDER_TYPE_AUTO, hvideo_t.RENDER_TYPE_AUTO);
    constants.put(RNValleyRtcApiConstants.RTC_EVTID_RESP_LOGINED, IRtcSink.RTC_EVTID_RESP_LOGINED);
    constants.put(RNValleyRtcApiConstants.RTC_EVTID_RESP_SET_CHANNEL_ATTR, IRtcSink.RTC_EVTID_RESP_SET_CHANNEL_ATTR);
    constants.put(RNValleyRtcApiConstants.RTC_EVTID_RESP_SET_USER_ATTR, IRtcSink.RTC_EVTID_RESP_SET_USER_ATTR);
    constants.put(RNValleyRtcApiConstants.RTC_EVTID_RESP_SEND_MSG, IRtcSink.RTC_EVTID_RESP_SEND_MSG);
    constants.put(RNValleyRtcApiConstants.RTC_EVTID_NTF_USER_ENTER, IRtcSink.RTC_EVTID_NTF_USER_ENTER);
    constants.put(RNValleyRtcApiConstants.RTC_EVTID_NTF_USER_LEAVE, IRtcSink.RTC_EVTID_NTF_USER_LEAVE);
    constants.put(RNValleyRtcApiConstants.RTC_EVTID_NTF_SET_CHANNEL_ATTR, IRtcSink.RTC_EVTID_NTF_SET_CHANNEL_ATTR);
    constants.put(RNValleyRtcApiConstants.RTC_EVTID_NTF_SET_USER_ATTR, IRtcSink.RTC_EVTID_NTF_SET_USER_ATTR);
    constants.put(RNValleyRtcApiConstants.RTC_EVTID_NTF_RECV_MSG, IRtcSink.RTC_EVTID_NTF_RECV_MSG);
    constants.put(RNValleyRtcApiConstants.RTC_EVTID_NTF_CONNECT_LOST, IRtcSink.RTC_EVTID_NTF_CONNECT_LOST);
    constants.put(RNValleyRtcApiConstants.RTC_EVTID_NTF_CONNECT_RESUME, IRtcSink.RTC_EVTID_NTF_CONNECT_RESUME);
    constants.put(RNValleyRtcApiConstants.RTC_EVTID_NTF_DUP_LOGINED, IRtcSink.RTC_EVTID_NTF_DUP_LOGINED);
    return constants;
  }

  // static api
  static public void InitSDK(Application app) {
    Log.d(TAG, "===== InitSDK: app");
    RNValleyRtcApiModule.valleyApp = app;
  }

  // ========== private ====================
  private void chmod777(File file, String root) {
    try {
      if (null == file || !file.exists()) {
        return;
      }

      Runtime.getRuntime().exec("chmod 777 " + file.getAbsolutePath());
      File tempFile = file.getParentFile();
      String tempName = tempFile.getName();
      if (tempFile.getName() == null || "".equals(tempName)) {
        return;
      }
      else if (!root.equals("") && root.equals(tempName)) {
        Runtime.getRuntime().exec("chmod 777 " + tempFile.getAbsolutePath());
        return;
      }

      chmod777(file.getParentFile(), root);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }

  private void mkdirs(String path) {
    try {
      File file = new File(path);
      if (!file.isDirectory()) {
        if (!file.mkdirs()) {
          Log.d("ApplicationEx","mkdir failed");
        }
        chmod777(new File(path), null);
      }
    } catch (Throwable e) {
      e.printStackTrace();
    }
  }

  private void channelCallbackToOut(WritableMap params) {
    Log.d(TAG, "===== channelCallbackToOut: ");
    this.reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit("ValleyCallback", params);
  }

  // ========== from response object ===============
  public void fromObjRespLogin(Object o, WritableMap params) {
    objRespLogin obj = (objRespLogin)o;
    params.putString("userid", obj.getUserid());
  }

  public void fromObjRespMsg(Object o, WritableMap params) {
    objRespMsg obj = (objRespMsg)o;
    params.putString("from_userid", obj.getFromUserID());
    params.putString("to_userid", obj.getToUserID());
    params.putString("msg", obj.getMessage());
    params.putString("token", obj.getToken());
    params.putInt("msg_type", obj.getMsgType());
    params.putInt("msg_time", (int)(obj.getMsgTime()));
  }

  public void fromObjRespSetChannelAttr(Object o, WritableMap params) {
    objRespSetChannelAttr obj = (objRespSetChannelAttr)o;
    params.putString("attr_name", obj.getAttrName());
    params.putString("attr_value", obj.getAttrValue());
  }

  public void fromObjRespSetUserAttr(Object o, WritableMap params) {
    objRespSetUserAttr obj = (objRespSetUserAttr)o;
    params.putString("attr_name", obj.getAttrName());
    params.putString("attr_value", obj.getAttrValue());
    params.putString("userid", obj.getUserID());
  }
  // ========== from response object ===============

  // ========== from ntf object ===============

  public void fromObjNtfUserEnter(Object o, WritableMap params) {
    objNtfUserEnter obj = (objNtfUserEnter)o;
    params.putString("userid", obj.getUserid());
  }

  public void fromObjNtfUserLeave(Object o, WritableMap params) {
    objNtfUserLeave obj = (objNtfUserLeave)o;
    params.putString("userid", obj.getUserid());
  }

  public void fromObjNtfMsg(Object o, WritableMap params) {
    objNtfMsg obj = (objNtfMsg)o;
    params.putString("from_userid", obj.getFromUserID());
    params.putString("to_userid", obj.getToUserID());
    params.putString("msg", obj.getMessage());
    params.putString("token", obj.getToken());
    params.putInt("msg_type", obj.getMsgType());
    params.putInt("msg_time", (int)(obj.getMsgTime()));
  }

  public void fromObjNtfSetChannelAttr(Object o, WritableMap params) {
    objNtfSetChannelAttr obj = (objNtfSetChannelAttr)o;
    params.putString("attr_name", obj.getAttrName());
    params.putString("attr_value", obj.getAttrValue());
  }

  public void fromObjNtfSetUserAttr(Object o, WritableMap params) {
    objNtfSetUserAttr obj = (objNtfSetUserAttr)o;
    params.putString("attr_name", obj.getAttrName());
    params.putString("attr_value", obj.getAttrValue());
    params.putString("userid", obj.getUserID());
  }
  // ========== from ntf object ===============
  // ========== private ====================

  // =========== react method ==========
  // =========== static method ==========
  @ReactMethod
  public void InitSDK() {
    Log.d(TAG, "===== InitSDK: local");
    String mDataPath = "";
    try {
      File file = Environment.getExternalStorageDirectory();
      if(!file.exists()) {
        file = Environment.getDataDirectory();
      }

      if(!file.exists()) {
        file =  RNValleyRtcApiModule.valleyApp.getApplicationContext().getFilesDir();
      }

      mDataPath = file.getAbsolutePath() + "/Xrtc";
      mkdirs(mDataPath);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
//    ValleyRtcAPI.InitSDK(RNValleyRtcApiModule.valleyApp, mDataPath, null);
  }

  @ReactMethod
  public void SetAuthoKey(String authokey) {
    Log.d(TAG, "===== SetAuthoKey: authokey = " + authokey);
//    ValleyRtcAPI.SetAuthoKey(authokey);
  }

  @ReactMethod
  public void CleanSDK() {
    Log.d(TAG, "===== CleanSDK: ");
//    ValleyRtcAPI.CleanSDK();
  }

  @ReactMethod
  public void GetErrDesc(int ec, Callback callback) {
    Log.d(TAG, "===== GetErrDesc: ec = " + ec);
//    callback.invoke(ValleyRtcAPI.GetErrDesc(ec));
  }

  @ReactMethod
  public void GetSDKVersion(Callback callback) {
    Log.d(TAG, "===== GetSDKVersion: ");
//    callback.invoke(ValleyRtcAPI.GetSDKVersion());
  }

  @ReactMethod
  public void CreateChannel(boolean withVideo, Promise promise) {
    Log.d(TAG, "===== CreateChannel: withVideo = " + withVideo);
//    rtcChannel = ValleyRtcAPI.CreateChannel(withVideo, reactContext);
    if (rtcChannel != null) {
//      rtcChannel.RegisterRtcSink(impl, 0);
      promise.resolve(null);
    }
    else {
      // IRtcChannel.ERR_NOT_INITIALIZE
      promise.reject("-5", "-5");
    }
  }
  // =========== static method ==========

  // =========== channel method ==========

  @ReactMethod
  public void ChannelRelease() {
    Log.d(TAG, "===== ChannelRelease: ");
    if (rtcChannel != null) {
//      rtcChannel.Release();
    }
    rtcChannel = null;
  }

  @ReactMethod
  public void ChannelLogout() {
    Log.d(TAG, "===== ChannelLogout: ");
    if (rtcChannel != null) {
//      rtcChannel.Logout();
    }
  }

  @ReactMethod
  public void ChannelGetLoginStatus(Callback callback) {
    Log.d(TAG, "===== ChannelGetLoginStatus: ");
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.GetLoginStatus();
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelEnableInterface(int iids, Callback callback) {
    Log.d(TAG, "===== ChannelEnableInterface: iids = " + iids);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.EnableInterface(iids);
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelLogin(@NonNull String channelid, @NonNull String userid, Callback callback) {
    Log.d(TAG, "===== ChannelLogin: channelid = " + channelid + ", userid = " + userid);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.Login(channelid, userid);
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelSendMsgr(int msgType, String msg, String token, String toUID, Callback callback) {
    Log.d(TAG, "===== ChannelSendMsgr: msgType = " + msgType + ", msg = " + msg + ", token = " + token + ", toUID = " + toUID);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.SendMsgr(msgType, msg, token, toUID);
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelSetVideoProfileint(int profile, Callback callback) {
    Log.d(TAG, "===== ChannelSetVideoProfileint: profile = " + profile);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.SetVideoProfile(profile);
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelSetLocalVideo(hvideo_t hVideo, Callback callback) {
    Log.d(TAG, "===== ChannelSetLocalVideo: ");
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.SetLocalVideo(hVideo);
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelRemoveLocalVideo(Callback callback) {
    Log.d(TAG, "===== ChannelRemoveLocalVideo: ");
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.RemoveLocalVideo();
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelSetUserVideo(String userid, hvideo_t hVideo, Callback callback) {
    Log.d(TAG, "===== ChannelSetUserVideo: userid = " + userid);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.SetUserVideo(userid, hVideo);
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelRemoveUserVideo(String userid, Callback callback) {
    Log.d(TAG, "===== ChannelRemoveUserVideo: userid = " + userid);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.RemoveUserVideo(userid);
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelEnableLocalAudio(boolean bEnable, Callback callback) {
    Log.d(TAG, "===== ChannelEnableLocalAudio: bEnable = " + bEnable);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.EnableLocalAudio(bEnable);
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelEnableLocalVideo(boolean bEnable, Callback callback) {
    Log.d(TAG, "===== ChannelEnableLocalVideo: bEnable = " + bEnable);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.EnableLocalVideo(bEnable);
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelEnableRemoteAudio(String userid, boolean bEnable, Callback callback) {
    Log.d(TAG, "===== ChannelEnableRemoteAudio: bEnable = " + bEnable + ", userid = " + userid);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.EnableRemoteAudio(userid, bEnable);
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelEnableRemoteVideo(String userid, boolean bEnable, Callback callback) {
    Log.d(TAG, "===== ChannelEnableRemoteVideo: bEnable = " + bEnable + ", userid = " + userid);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.EnableRemoteVideo(userid, bEnable);
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelDisableAudio(Callback callback) {
    Log.d(TAG, "===== ChannelDisableAudio: ");
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.DisableAudio();
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelDisableVideo(Callback callback) {
    Log.d(TAG, "===== ChannelDisableVideo: ");
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.DisableVideo();
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelSwitchCamera(Callback callback) {
    Log.d(TAG, "===== ChannelSwitchCamera: ");
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.SwitchCamera();
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelSetChannelAttr(String name, String value, Callback callback) {
    Log.d(TAG, "===== ChannelSetChannelAttr: name = " + name + ", value = " + value);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.SetChannelAttr(name, value);
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelSetUserAttr(String userid, String name, String value, Callback callback) {
    Log.d(TAG, "===== ChannelSetUserAttr: name = " + name + ", value = " + value + ", userid = " + userid);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.SetUserAttr(userid, name, value);
    }
    else {
      ec = IRtcChannel.ERR_NOT_INITIALIZE;
    }
    callback.invoke(ec);
  }

  @ReactMethod
  public void ChannelGetChannelAttr(String name, Callback callback) {
    Log.d(TAG, "===== ChannelGetChannelAttr: name = " + name);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.GetChannelAttr(name);
    }
    else {
      callback.invoke("");
    }
  }

  @ReactMethod
  public void ChannelGetUserAttr(String userid, String name, Callback callback) {
    Log.d(TAG, "===== ChannelGetUserAttr: name = " + name + ", userid = " + userid);
    int ec = IRtcChannel.ERR_SUCCEED;
    if (rtcChannel != null) {
//      ec = rtcChannel.GetUserAttr(userid, name);
    }
    else {
      callback.invoke("");
    }
  }

  @ReactMethod
  public void ChannelGetUser(String userid, Promise promise) {
    Log.d(TAG, "===== ChannelGetUser: userid = " + userid);
    if (rtcChannel != null) {
//      objUser u = rtcChannel.GetUser(userid);
//      if (u == null) {
//        promise.reject("-5", "-5");
//      }
//      else {
//        // TODO:............
//        promise.resolve(null);
//      }
      promise.resolve(null);
    }
    else {
      // IRtcChannel.ERR_NOT_INITIALIZE
      promise.reject("-5", "-5");
    }
  }

  @ReactMethod
  public void ChannelGetUserList(Promise promise) {
    Log.d(TAG, "===== ChannelGetUserList: ");
    if (rtcChannel != null) {
//      objUserList u = rtcChannel.GetUserList();
//      if (u == null) {
//        promise.reject("-5", "-5");
//      }
//      else {
//        // TODO:............
//        promise.resolve(null);
//      }
      promise.resolve(null);
    }
    else {
      // IRtcChannel.ERR_NOT_INITIALIZE
      promise.reject("-5", "-5");
    }
  }
}
